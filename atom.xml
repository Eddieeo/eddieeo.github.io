<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linuxops.fun/"/>
  <updated>2019-10-30T16:46:16.334Z</updated>
  <id>https://linuxops.fun/</id>
  
  <author>
    <name>Eddieeo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu系统启动失败操作指南</title>
    <link href="https://linuxops.fun/2018/06/12/e83114b.html"/>
    <id>https://linuxops.fun/2018/06/12/e83114b.html</id>
    <published>2018-06-12T11:31:12.000Z</published>
    <updated>2019-10-30T16:46:16.334Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><p>系统启动失败后，启动机器测试以下两种模式是否可以启动。</p><h2 id="在-ubuntu-1804-lts-中进入救援模式"><a class="markdownIt-Anchor" href="#在-ubuntu-1804-lts-中进入救援模式"></a> 在 Ubuntu 18.04 LTS 中进入救援模式</h2><p>启动你的 Ubuntu 系统。出现 Grub 菜单时，选择第一条并按下 <code>e</code> 进行编辑。</p><img src="/2018/06/12/e83114b/233457hjyzsbrkrv5ygr3r.png"><p>如果你没有看到 Grub 菜单，只需在 BIOS 的 logo 消失后立即按下 <code>ESC</code> 键。</p><p>找到以单词 <code>linux</code> 开头的行，并在该行的末尾添加以下内容（要到达末尾，只需按下 <code>Ctrl+e</code> 或使用 <code>End</code> 键或左右箭头键）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemd.unit=rescue.target</span><br></pre></td></tr></table></figure><img src="/2018/06/12/e83114b/233457bixanaaxo8r3fxo7.png"><p>添加完成后，只需按下 <code>Ctrl+x</code> 或 <code>F10</code> 即可继续启动救援模式。几秒钟后，你将以 root 用户身份进入救援模式（单用户模式）。以下是 Ubuntu 18.04 LTS 服务器版中救援模式的样子：</p><img src="/2018/06/12/e83114b/233458nbo2sy2k0pdyh1d2.png"><p>接下来，输入以下命令将根 （<code>/</code>） 文件系统重新挂载成读/写模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -n -o remount,rw /</span><br></pre></td></tr></table></figure><h2 id="启动到紧急模式"><a class="markdownIt-Anchor" href="#启动到紧急模式"></a> 启动到紧急模式</h2><p>将 Ubuntu 引导到紧急模式与上述方法相同。你只需在编辑 Grub 菜单时将 <code>systemd.unit=rescue.target</code> 替换为 <code>systemd.unit=emergency.target</code> 即可。</p><img src="/2018/06/12/e83114b/234845oh66t6gtwtu4lu3w.png"><p>添加 <code>systemd.unit=emergency.target</code> 后，按下 <code>Ctrl+x</code> 或 <code>F10</code> 继续启动到紧急模式。</p><img src="/2018/06/12/e83114b/233459o8g8ff8w8gc3gs80.png"><p>最后，你可以使用以下命令将根文件系统重新挂载成读/写模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -n -o remount,rw /</span><br></pre></td></tr></table></figure><h2 id="在救援模式和紧急模式之间切换"><a class="markdownIt-Anchor" href="#在救援模式和紧急模式之间切换"></a> 在救援模式和紧急模式之间切换</h2><p>如果你处于救援模式，则不必像上面提到的那样编辑 Grub 条目。相反，只需输入以下命令即可立即切换到紧急模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl emergency</span><br></pre></td></tr></table></figure><p>同样，要从紧急模式切换到救援模式，请输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl rescue</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;系统启动失败后，启动机器测试以下两种模式是否可以启动。&lt;/p&gt;&lt;h2 id=&quot;在-ubuntu-1804-lts-中进入救援
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://linuxops.fun/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://linuxops.fun/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Rabbitmq重启服务后登录用户丢失问题</title>
    <link href="https://linuxops.fun/2017/09/10/e8c21973.html"/>
    <id>https://linuxops.fun/2017/09/10/e8c21973.html</id>
    <published>2017-09-10T10:16:12.000Z</published>
    <updated>2019-10-30T16:46:16.334Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><p>Rabbitmq在命令行创建的用户，当Raqbbitmq服务重启后会丢失，需要重新创建，只要根据以下两个步骤更改对应的两个配置文件，就可以实现重启Rabbitmq服务后用户保留。</p><p>(1) 修改Rabbitmq的配置文件 <code>/etc/rabbitmq/rabbitmq-env.conf</code> ，增加以下这行内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODENAME=rabbit@test-rabitmq</span><br></pre></td></tr></table></figure><blockquote><p>注：NODENAME=rabbit@为配置文件的字段格式，test-rabitmq为服务器的主机名，需要将test-rabitmq更改为你的服务器对应的主机名。</p></blockquote><p>(2) 修改系统的配置文件/etc/hosts，增加以下这行内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 test-rabitmq</span><br></pre></td></tr></table></figure><blockquote><p>注：127.0.0.1为服务器的IP地址，test-rabitmq为服务器的主机名，只需要根据自己的服务器修改成自己服务器对应的主机名<code>hostname</code>即可。</p></blockquote><p>完成以上两个步骤后，在命令行增加Rabbitmq的用户，并设置用户的权限和角色，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># rabbitmqctl add_user Username Password  # 新增用户</span><br><span class="line"># rabbitmqctl set_user_tags User Tag  # 设置用户角色</span><br><span class="line"># rabbitmqctl set_permissions [-p vhostpath] username regexp regexp regexp  # 设置用户权限</span><br></pre></td></tr></table></figure><p>最后，重启Rabbitmq服务，在命令行界面查看当前用户列表 ，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rabbitmqctl list_users</span><br></pre></td></tr></table></figure><p>返回结果显示，刚才在命令行中新建的用户 Username 还存在，则表示重启Rabbitmq服务后，用户保留成功。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;Rabbitmq在命令行创建的用户，当Raqbbitmq服务重启后会丢失，需要重新创建，只要根据以下两个步骤更改对应的两个配
      
    
    </summary>
    
    
      <category term="Middleware" scheme="https://linuxops.fun/categories/Middleware/"/>
    
    
  </entry>
  
  <entry>
    <title>Stunnel隐藏OpenVPN流量实现科学上网</title>
    <link href="https://linuxops.fun/2017/05/31/8a64b922.html"/>
    <id>https://linuxops.fun/2017/05/31/8a64b922.html</id>
    <published>2017-05-31T13:15:12.000Z</published>
    <updated>2019-10-30T16:54:56.531Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:55:56 GMT+0800 (China Standard Time) --><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>众所周知的原因，在海外直接搭建 <a href="https://openvpn.net/" target="_blank" rel="noopener">OpenVPN</a> 根本无法使用（TCP 模式），或者用段时间就被墙了（UDP 模式）。本文主要介绍如何通过 <a href="https://www.stunnel.org/" target="_blank" rel="noopener">Stunnel</a> 隐藏 OpenVPN 流量，使其看起来像普通的 SSL 协议传输，从而绕过 gfw。</p><p>Stunnel 分为客户端和服务端，客户端负责接收用户 OpenVPN 客户端流量并转化成 SSL 协议加密数据包，然后转发给 Stunnel 服务端，实现 SSL 协议数据传输，服务端然后将流量转化成 OpenVPN 流量传输给 OpenVPN 服务端。因此我们可以在国内搭 Stunnel 客户端，国外搭 Stunnel 服务端。OpenVPN + Stunnel 整体架构如下：</p><img src="/2017/05/31/8a64b922/336678946543465436.png"><h2 id="stunnel-隐藏-openvpn-流量具体过程"><a class="markdownIt-Anchor" href="#stunnel-隐藏-openvpn-流量具体过程"></a> Stunnel 隐藏 OpenVPN 流量具体过程</h2><h3 id="1-搭建-openvpn-服务端"><a class="markdownIt-Anchor" href="#1-搭建-openvpn-服务端"></a> 1. 搭建 OpenVPN 服务端</h3><p>关于 OpenVPN 的搭建及使用在这里不多说了，可以查看我之前的博文。这里要说明的是，Stunnel 不支持 udp 流量转换，所以 OpenVPN 需要以 TCP 模式运行。下面为 OpenVPN 服务端 TCP 模式的 server.conf 配置示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">####################################################################</span><br><span class="line"># 针对多客户端的OpenVPN 2.4的服务器端配置文件示例</span><br><span class="line">#</span><br><span class="line"># 本文件用于多客户端&lt;-&gt;单服务器端的OpenVPN服务器端配置</span><br><span class="line">#</span><br><span class="line"># OpenVPN也支持单机&lt;-&gt;单机的配置(更多信息请查看网站上的示例页面)</span><br><span class="line">#</span><br><span class="line"># 该配置支持Windows或者Linux/BSD系统。此外，在Windows上，记得将路径加上双引号，</span><br><span class="line"># 并且使用两个反斜杠，例如：&quot;C:\\Program Files\\OpenVPN\\config\\foo.key&quot;</span><br><span class="line">#</span><br><span class="line"># &apos;#&apos; or &apos;;&apos;开头的均为注释内容</span><br><span class="line">###################################################################</span><br><span class="line"></span><br><span class="line"># OpenVPN监听本机的哪些IP地址，该命令是可选的，如果不设置，则默认监听本机的所有IP地址</span><br><span class="line">;local a.b.c.d</span><br><span class="line"># 监听的端口号</span><br><span class="line">port 1194</span><br><span class="line"># 服务端用的协议tcp/udp，udp能快点，所以我选择udp</span><br><span class="line">proto udp</span><br><span class="line"></span><br><span class="line"># 默认使用路由模式，tap是桥接模式</span><br><span class="line"># 指定OpenVPN创建的通信隧道类型</span><br><span class="line"># &quot;dev tun&quot;将会创建一个路由IP隧道</span><br><span class="line"># &quot;dev tap&quot;将会创建一个以太网隧道</span><br><span class="line"># 如果你是以太网桥接模式，并且提前创建了一个名为&quot;tap0&quot;的与以太网接口进行桥接的虚拟接口，则你可以使用&quot;dev tap0&quot;</span><br><span class="line"># 如果你想控制VPN的访问策略，你必须为TUN/TAP接口创建防火墙规则</span><br><span class="line"># 在非Windows系统中，你可以给出明确的单位编号(unit number)，例如&quot;tun0&quot;</span><br><span class="line"># 在Windows中，你也可以使用&quot;dev-node&quot;</span><br><span class="line"># 在多数系统中，除非你部分禁用或者完全禁用了TUN/TAP接口的防火墙，否则VPN将不起作用</span><br><span class="line">;dev tap</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"># 如果你想配置多个隧道，你需要用到网络连接面板中TAP-Win32适配器的名称例如&quot;MyTap&quot;)</span><br><span class="line"># 在XP SP2或更高版本的系统中，你可能需要有选择地禁用掉针对TAP适配器的防火墙</span><br><span class="line"># 通常情况下，非Windows系统则不需要该指令。</span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"># CA根证书路径</span><br><span class="line">ca /etc/openvpn/server/certs/ca.crt</span><br><span class="line"># OpenVPN服务端证书路径</span><br><span class="line">cert /etc/openvpn/server/certs/server.crt</span><br><span class="line"># OpenVPN服务端密钥路径</span><br><span class="line">key /etc/openvpn/server/certs/server.key</span><br><span class="line"># Diffie-Hellman算法密钥文件路径</span><br><span class="line">dh /etc/openvpn/server/certs/dh.pem</span><br><span class="line"></span><br><span class="line"># 出于SSL/TLS之外更多的安全考虑，创建一个&quot;HMAC 防火墙&quot;可以帮助抵御DoS攻击和UDP端口淹没攻击。</span><br><span class="line"># 你可以使用以下命令来生成：</span><br><span class="line">#   openvpn --genkey --secret ta.key</span><br><span class="line"># 服务器和每个客户端都需要拥有该密钥的一个拷贝。</span><br><span class="line"># 第二个参数在服务器端应该为&apos;。</span><br><span class="line"># tls-auth key，参数0可以省略，如果不省略，那么客户端配置文件相应的参数tls-auth该配成 1。如果省略，那么客户端不需要 tls-auth 配置</span><br><span class="line">tls-auth /etc/openvpn/server/certs/ta.key 0</span><br><span class="line"></span><br><span class="line"># 选择一个密码加密算法。</span><br><span class="line"># 该配置项也必须复制到每个客户端配置文件中。</span><br><span class="line">;cipher BF-CBC        # Blowfish (默认)</span><br><span class="line">;cipher AES--CBC      # AES</span><br><span class="line">;cipher DES-EDE3-CBC  # Triple-DES</span><br><span class="line"></span><br><span class="line"># 该网段为OpenVPN虚拟网卡网段，不要和内网网段冲突即可。OpenVPN默认使用10.8.0.0/24网段为客户端分配IP地址</span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line"># 指定用于记录客户端和虚拟IP地址的关联关系的文件，当重启OpenVPN时，再次连接的客户端将分配到与上一次分配相同的虚拟IP地址</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"></span><br><span class="line"># 主DNS服务器配置，可以根据需要指定其他DNS</span><br><span class="line">push &quot;dhcp-option DNS 8.8.8.8&quot;</span><br><span class="line"># 备DNS服务器配置，可以根据需要指定其他DNS</span><br><span class="line">push &quot;dhcp-option DNS 8.8.4.4&quot;</span><br><span class="line"></span><br><span class="line"># 推送路由信息到客户端，告诉客户端连接172.18.0.0/16这个网段的流量通过openvpn转发，以允许客户端能够连接到服务端背后的其他私有子网;</span><br><span class="line"># 其中172.18.0.0/16网段是你要连接的openvpn服务端的私网ip地址段，类似于局部代理;</span><br><span class="line"># 使客户端机器在浏览器访问其他正常网页时由本地网卡出去，从而达到不影响本地网络的网速。</span><br><span class="line">push &quot;route 172.18.0.0 255.255.0.0&quot;</span><br><span class="line"></span><br><span class="line"># 客户端所有流量都通过open VPN虚拟网卡转发，类似于全局代理，这样客户端在浏览器访问其他正常网站时;</span><br><span class="line"># 也是通过OpenVPN虚拟网卡出去访问，会严重影响客户端访问正常网页的网速</span><br><span class="line">;push &quot;redirect-gateway def1&quot;</span><br><span class="line"></span><br><span class="line"># 该指令仅针对以太网桥接模式。</span><br><span class="line"># 首先，你必须使用操作系统的桥接能力将以太网网卡接口和TAP接口进行桥接。</span><br><span class="line"># 然后，你需要手动设置桥接接口的IP地址、子网掩码；</span><br><span class="line"># 在这里，我们假设为10.。</span><br><span class="line"># 最后，我们必须指定子网的一个IP范围(例如从10.8.0.50开始，到10.8.0.100结束)，以便于分配给连接的客户端。</span><br><span class="line"># 如果你不是以太网桥接模式，直接注释掉这行指令即可。</span><br><span class="line">;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100</span><br><span class="line"></span><br><span class="line"># 该指令仅针对使用DHCP代理的以太网桥接模式，</span><br><span class="line"># 此时客户端将请求服务器端的DHCP服务器，从而获得分配给它的IP地址和DNS服务器地址。</span><br><span class="line"># 在此之前，你也需要先将以太网网卡接口和TAP接口进行桥接。</span><br><span class="line"># 注意：该指令仅用于OpenVPN客户端，并且该客户端的TAP适配器需要绑定到一个DHCP客户端上。</span><br><span class="line">;server-bridge</span><br><span class="line"></span><br><span class="line"># 允许一个用户多个终端连接</span><br><span class="line"># 如果多个客户端可能使用相同的证书/私钥文件或Common Name进行连接，那么你可以取消该指令的注释。</span><br><span class="line"># 建议该指令仅用于测试目的。对于生产使用环境而言，每个客户端都应该拥有自己的证书和私钥。</span><br><span class="line"># 如果你没有为每个客户端分别生成Common Name唯一的证书/私钥，你可以取消该行的注释(但不推荐这样做)。</span><br><span class="line">;duplicate-cn</span><br><span class="line"></span><br><span class="line"># keepalive指令将导致类似于ping命令的消息被来回发送，以便于服务器端和客户端知道对方何时被关闭。</span><br><span class="line"># 每10秒钟ping一次，如果120秒内都没有收到对方的回复，则表示远程连接已经关闭。</span><br><span class="line">keepalive 10 120</span><br><span class="line"></span><br><span class="line"># 在VPN连接上启用压缩。</span><br><span class="line"># 如果你在此处启用了该指令，那么也应该在每个客户端配置文件中启用它。</span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"># 允许并发连接的客户端的最大数量</span><br><span class="line">;max-clients</span><br><span class="line"></span><br><span class="line"># 去掉该指令的注释将允许不同的客户端之间相互&quot;可见&quot;(允许客户端之间互相访问)。</span><br><span class="line"># 该选项允许连接openvpn的客户端直接通讯而不经过openvpn服务端网关。</span><br><span class="line"># 默认情况下，客户端只能&quot;看见&quot;服务器。为了确保客户端只能看见服务器，你还可以在服务器端的TUN/TAP接口上设置适当的防火墙规则。</span><br><span class="line">client-to-client</span><br><span class="line"></span><br><span class="line"># 持久化选项可以尽量避免访问那些在重启之后由于用户权限降低而无法访问的某些资源。</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"># OpenVPN进程启动用户，OpenVPN用户在安装完openvpn安装包后就自动生成了</span><br><span class="line"># 在完成初始化工作之后，降低OpenVPN守护进程的权限是个不错的主意。</span><br><span class="line"># 该指令仅限于非Windows系统中使用。</span><br><span class="line">user openvpn</span><br><span class="line">group openvpn</span><br><span class="line"></span><br><span class="line"># 默认情况下，日志消息将写入syslog(在Windows系统中，如果以服务方式运行，日志消息将写入OpenVPN安装目录的log文件夹中)。</span><br><span class="line"># 你可以使用log或者log-append来改变这种默认情况。</span><br><span class="line"># &quot;log&quot;方式在每次启动时都会清空之前的日志文件。</span><br><span class="line"># &quot;log-append&quot;这是在之前的日志内容后进行追加。</span><br><span class="line"># 你可以使用两种方式之一(但不要同时使用)。</span><br><span class="line">;log        /var/log/openvpn/openvpn.log</span><br><span class="line">log-append  /var/log/openvpn/openvpn.log</span><br><span class="line"># 输出一个简短的状态文件，用于显示当前的连接状态，该文件每分钟都会清空并重写一次。</span><br><span class="line">status /var/log/openvpn/openvpn-status.log</span><br><span class="line"></span><br><span class="line"># 为日志文件设置适当的冗余级别(~)。冗余级别越高，输出的信息越详细。</span><br><span class="line"># 0 表示静默运行，只记录致命错误。</span><br><span class="line"># 4 表示合理的常规用法。</span><br><span class="line"># 5 可以帮助调试连接错误。</span><br><span class="line"># 9 表示极度冗余，输出非常详细的日志信息。</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"># 重复信息的沉默度。</span><br><span class="line"># 相同类别的信息只有前20条会输出到日志文件中。</span><br><span class="line">;mute</span><br><span class="line"></span><br><span class="line"># 当服务端重新启动时，通知客户端可以自动重新连接。</span><br><span class="line"># 当proto使用tcp时，需要注销该行配置，否则会导致服务端无法启动</span><br><span class="line">explicit-exit-notify 1</span><br><span class="line"></span><br><span class="line"># 为指定的客户端分配指定的IP地址，或者客户端背后也有一个私有子网想要访问VPN，</span><br><span class="line"># 那么你可以针对该客户端的配置文件使用ccd子目录。</span><br><span class="line"># (简而言之，就是允许客户端所在的局域网成员也能够访问VPN) </span><br><span class="line"># 举个例子：假设有个Common Name为/255.255.255.248。</span><br><span class="line"># 首先，你需要去掉下面两行指令的注释：</span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route 192.168.40.128 255.255.255.248</span><br><span class="line"># 然后创建一个文件ccd/Thelonious，该文件的内容为：</span><br><span class="line">#   iroute 192.168.40.128 255.255.255.248</span><br><span class="line"></span><br><span class="line"># 这样客户端所在的局域网就可以访问VPN了。</span><br><span class="line"># 注意，这个指令只能在你是基于路由、而不是基于桥接的模式下才能生效。</span><br><span class="line"># 比如，你使用了&quot;dev tun&quot;和&quot;server&quot;指令。</span><br><span class="line"># 再举个例子：假设你想给Thelonious分配一个固定的IP地址10.。</span><br><span class="line"># 首先，你需要去掉下面两行指令的注释：</span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route 10.9.0.0 255.255.255.252</span><br><span class="line"># 然后在文件ccd/Thelonious中添加如下指令：</span><br><span class="line">#   ifconfig-push 10.9.0.1 10.9.0.2</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 如果你想要为不同群组的客户端启用不同的防火墙访问策略，你可以使用如下两种方法：</span><br><span class="line"># # ()运行多个OpenVPN守护进程，每个进程对应一个群组，并为每个进程(群组)启用适当的防火墙规则。</span><br><span class="line"># # () (进阶)创建一个脚本来动态地修改响应于来自不同客户的防火墙规则。</span><br><span class="line"># # 关于learn-address脚本的更多信息请参考官方手册页面。</span><br><span class="line">;learn-address ./script</span><br></pre></td></tr></table></figure><h3 id="2-stunnel-服务端安装配置"><a class="markdownIt-Anchor" href="#2-stunnel-服务端安装配置"></a> 2. Stunnel 服务端安装配置</h3><h4 id="安装配置-stunnel-服务端海外节点"><a class="markdownIt-Anchor" href="#安装配置-stunnel-服务端海外节点"></a> 安装配置 Stunnel 服务端（海外节点）</h4><p>安装Stunnel 服务端，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install stunnel</span><br><span class="line"># cd /etc/stunnel</span><br><span class="line"># openssl req -new -x509 -days 3650 -nodes -out stunnel.pem -keyout stunnel.pem</span><br><span class="line"># chmod 600 /etc/stunnel/stunnel.pem</span><br></pre></td></tr></table></figure><p>修改Stunnel 服务端的配置文件 stunnel.conf，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim stunnel.conf   # 编辑配置文件stunnel.conf</span><br></pre></td></tr></table></figure><p>stunnel.conf 填入如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pid = /var/run/stunnel.pid</span><br><span class="line">output = /var/log/stunnel.log</span><br><span class="line">client = no</span><br><span class="line">[openvpn]</span><br><span class="line">accept = 443   </span><br><span class="line">connect = 127.0.0.1:4001</span><br><span class="line">cert = /etc/stunnel/stunnel.pem</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>accept = 443 # Stunnel 服务端监听端口<br>connect = 127.0.0.1:4001 # OpenVPN 服务端 IP 地址和端口</p></blockquote><h4 id="使用-systemd-启动-stunnel-服务端"><a class="markdownIt-Anchor" href="#使用-systemd-启动-stunnel-服务端"></a> 使用 systemd 启动 Stunnel 服务端</h4><p>为了管理方便，我们使用 systemd 管理 Stunnel 服务，编辑一个 systemd unit 的管理文件，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /lib/systemd/system/stunnel.service</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=SSL tunnel for network daemons</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=stunnel.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/stunnel /etc/stunnel/stunnel.conf</span><br><span class="line">ExecStop=/usr/bin/killall -9 stunnel</span><br><span class="line"></span><br><span class="line"># Give up if ping don&apos;t get an answer</span><br><span class="line">TimeoutSec=600</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">PrivateTmp=false</span><br></pre></td></tr></table></figure><p>启动 Stunnel 服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start stunnel.service</span><br><span class="line">systemctl enable stunnel.service</span><br></pre></td></tr></table></figure><h3 id="3-stunnel-客户端安装配置"><a class="markdownIt-Anchor" href="#3-stunnel-客户端安装配置"></a> 3. Stunnel 客户端安装配置</h3><p>Stunnel 的客户端安装和服务器一样，同样的软件，既可以作为客户端，也可以作为服务端，只是配置不同而已。</p><h4 id="安装配置-stunnel-客户端国内节点"><a class="markdownIt-Anchor" href="#安装配置-stunnel-客户端国内节点"></a> 安装配置 Stunnel 客户端（国内节点）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum -y install stunnel</span><br><span class="line">cd /etc/stunnel</span><br><span class="line">scp ....  # 将服务端的证书 stunnel.pem 拷贝到这里</span><br><span class="line">chmod 600 /etc/stunnel/stunnel.pem</span><br><span class="line">vim stunnel.conf 填入如下内容：</span><br><span class="line">pid=/var/run/stunnel.pid</span><br><span class="line">output=/var/log/stunnel.log</span><br><span class="line">client = yes</span><br><span class="line"></span><br><span class="line">[openvpn]</span><br><span class="line">accept=8443</span><br><span class="line">connect=stunnel_server_ip:443</span><br><span class="line">cert = /etc/stunnel/stunnel.pem</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>accept=8443 # Stunnel 客户端监听端口<br>stunnel_server_ip:443 # stunnel 服务端 ip 及端口</p></blockquote><h4 id="使用-systemd-启动-stunnel-客户端"><a class="markdownIt-Anchor" href="#使用-systemd-启动-stunnel-客户端"></a> 使用 systemd 启动 Stunnel 客户端</h4><p>这里前面同服务端的操作过程，不再赘述。<br>启动 Stunnel 客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start stunnel.service</span><br><span class="line">systemctl enable stunnel.service</span><br></pre></td></tr></table></figure><h3 id="4-使用-openvpn-连接-stunnel"><a class="markdownIt-Anchor" href="#4-使用-openvpn-连接-stunnel"></a> 4. 使用 OpenVPN 连接 Stunnel</h3><p>Stunnel + OpenVPN 都配好后，就可以使用 OpenVPN 客户端实现科学上网了，需要注意的是 OpenVPN 客户端现在需要连接的是 Stunnel 客户端，不再是直接连接 OpenVPN 服务端。</p><h2 id="相关文档"><a class="markdownIt-Anchor" href="#相关文档"></a> 相关文档</h2><p><a href="https://github.com/Xaqron/stunnel" target="_blank" rel="noopener">https://github.com/Xaqron/stunnel</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:55:56 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="CentOS" scheme="https://linuxops.fun/categories/CentOS/"/>
    
    
      <category term="OpenVPN" scheme="https://linuxops.fun/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN使用账号密码认证方式登陆</title>
    <link href="https://linuxops.fun/2017/05/30/f6c8d148.html"/>
    <id>https://linuxops.fun/2017/05/30/f6c8d148.html</id>
    <published>2017-05-30T12:26:12.000Z</published>
    <updated>2019-10-30T16:52:26.772Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:53:25 GMT+0800 (China Standard Time) --><blockquote><p>使用账号密码人认证方式方便给多人分配不同的账号和密码，多人使用更加方便</p></blockquote><p>鉴于上一篇文章已经在CentOS7系统上成功的搭建好 OpenVPN 了，以Windows客户端为例是直接使用证书进行连接OpenVPN服务端的，如果多人使用的话，建议改为账号+密码认证方式，这里介绍比较简单的一种方式。</p><h1 id="服务端配置"><a class="markdownIt-Anchor" href="#服务端配置"></a> 服务端配置</h1><h3 id="修改服务端配置"><a class="markdownIt-Anchor" href="#修改服务端配置"></a> 修改服务端配置</h3><p>修改OpenVPN服务端配置文件server.conf，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/openvpn/server.conf  # 打开server.conf配置文件编辑</span><br></pre></td></tr></table></figure><p>在配置文件server.conf的末尾追加下面的配置信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># use username and password login</span><br><span class="line"># 新加此行，开启密码验证脚本</span><br><span class="line">auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env</span><br><span class="line"># 加上client-cert-not-required代表只使用用户密码方式验证登录，不加则代表需要证书和用户名密码双重验证登录</span><br><span class="line">client-cert-not-required</span><br><span class="line"># 新加此行，使用客户提供的UserName作为Common Name</span><br><span class="line">username-as-common-name</span><br><span class="line"># 该指令提供对OpenVPN使用外部程序和脚本的策略级别的控制。较低的 水平 值更具限制性，较高的值更宽松。级别设置 </span><br><span class="line"># 0- 完全不调用外部程序。</span><br><span class="line"># 1- （默认）仅调用内置可执行文件，例如ifconfig，ip，route或netsh。</span><br><span class="line"># 2- 允许调用内置的可执行文件和用户定义的脚本。</span><br><span class="line"># 3- 允许通过环境变量将密码传递给脚本（可能不安全）。</span><br><span class="line"># 特别注意如果没有这个配置项会导致服务端校验密码时无法获取到密码，导致校验失败</span><br><span class="line">script-security 3</span><br></pre></td></tr></table></figure><h3 id="增加密码验证脚本"><a class="markdownIt-Anchor" href="#增加密码验证脚本"></a> 增加密码验证脚本</h3><p><a href="http://xn--OpenVPNcheckpsw-0j3x955b8pem36b8jiktr0y5bpua5950ae1hdztzn0ahrmoj9ek5yd3rua.sh" target="_blank" rel="noopener">下面开始编写OpenVPN服务端验证密码的脚本checkpsw.sh</a>，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/openvpn/checkpsw.sh</span><br></pre></td></tr></table></figure><p><a href="http://checkpsw.sh" target="_blank" rel="noopener">checkpsw.sh</a> 文件内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">###########################################################</span><br><span class="line"># checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt;</span><br><span class="line">#</span><br><span class="line"># This script will authenticate OpenVPN users against</span><br><span class="line"># a plain text file. The passfile should simply contain</span><br><span class="line"># one row per user with the username first followed by</span><br><span class="line"># one or more space(s) or tab(s) and then the password.</span><br><span class="line">###########################################################</span><br><span class="line"></span><br><span class="line">PASSFILE=&quot;/etc/openvpn/user_passwd.txt&quot;</span><br><span class="line">LOG_FILE=&quot;/var/log/openvpn/openvpn-login.log&quot;</span><br><span class="line">TIME_STAMP=`date &quot;+%Y-%m-%d %T&quot;`</span><br><span class="line"></span><br><span class="line">if [ ! -r &quot;$&#123;PASSFILE&#125;&quot; ]; then</span><br><span class="line">  echo &quot;$&#123;TIME_STAMP&#125;: Could not open password file \&quot;$&#123;PASSFILE&#125;\&quot; for reading.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">CORRECT_PASSWORD=`awk &apos;!/^;/&amp;&amp;!/^#/&amp;&amp;$1==&quot;&apos;$&#123;username&#125;&apos;&quot;&#123;print $2;exit&#125;&apos; $&#123;PASSFILE&#125;`</span><br><span class="line"></span><br><span class="line">if [ &quot;$&#123;CORRECT_PASSWORD&#125;&quot; = &quot;&quot; ]; then </span><br><span class="line">  echo &quot;$&#123;TIME_STAMP&#125;: User does not exist: username=\&quot;$&#123;username&#125;\&quot;, password=\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$&#123;password&#125;&quot; = &quot;$&#123;CORRECT_PASSWORD&#125;&quot; ]; then </span><br><span class="line">  echo &quot;$&#123;TIME_STAMP&#125;: Successful authentication: username=\&quot;$&#123;username&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">  exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;$&#123;TIME_STAMP&#125;: Incorrect password: username=\&quot;$&#123;username&#125;\&quot;, password=\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">exit 1</span><br></pre></td></tr></table></figure><p>为密码验证脚本checkpsw.sh添加可执行性权限，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x /etc/openvpn/checkpsw.sh</span><br></pre></td></tr></table></figure><h3 id="配置账号密码文件"><a class="markdownIt-Anchor" href="#配置账号密码文件"></a> 配置账号密码文件</h3><p>配置账号/密码文件user_passwd.txt的内容，新增账号/密码到这个文件，一行一个账号，账号密码用空格隔开：</p><blockquote><p>注：密码需要使用字母加数字，特殊字符等，且不能以数字开头</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/openvpn/user_passwd.txt # 编辑账号密码文件，添加以下内容</span><br><span class="line">eddieeo c123456@</span><br><span class="line"></span><br><span class="line"># 修改账号密码文件的访问权限，第一是为了安全起见，第二是启动OpenVPN服务端的用户（默认是openvpn用户）必须对账号密码文件具有可读权限</span><br><span class="line">$ cd /etc/openvpn/</span><br><span class="line">$ chmod 400 user_passwd.txt</span><br><span class="line">$ chown openvpn.openvpn user_passwd.txt</span><br></pre></td></tr></table></figure><p>重启openvpn服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart openvpn@server</span><br></pre></td></tr></table></figure><h1 id="客户端配置"><a class="markdownIt-Anchor" href="#客户端配置"></a> 客户端配置</h1><h3 id="修改客户端配置"><a class="markdownIt-Anchor" href="#修改客户端配置"></a> 修改客户端配置</h3><p>这里以 Windows 客户端为例，编辑客户端软件 OpenVPN GUI 安装路径下的config目录里名为 *.ovpn 结尾的配置文件，修改文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 注释掉客户端密钥认证方式</span><br><span class="line">;cert laptop.crt</span><br><span class="line">;key laptop.key</span><br><span class="line"></span><br><span class="line"># 新增账号/密码验证方式</span><br><span class="line">auth-user-pass</span><br></pre></td></tr></table></figure><h3 id="测试连接"><a class="markdownIt-Anchor" href="#测试连接"></a> 测试连接</h3><p>编辑完保存好配置文件，使用管理员身份打开客户端程序OpenVPN GUI ,尝试重新连接OpenVPN服务端，可以看到弹出登陆框，输入账号和密码进行验证，如下图所示：</p><img src="/2017/05/30/f6c8d148/20191030165746095.png"><p></p><p>显示OpenVPN GUI连接状态，如下图所示，表示完成账号密码验证，此时已经连接上OpenVPN服务端了。</p><img src="/2017/05/30/f6c8d148/20191030170024832.png"><p></p><p>最后使用 ping 服务端的私网地址的方式，测试连通性。</p><img src="/2017/05/30/f6c8d148/20191030170339707.png"><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><p>注意服务端配置文件 server.conf 的最后一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script-security 3</span><br></pre></td></tr></table></figure><p>默认的级别是 2，需要修改为级别 3 ， 可以用 ps 看进程号时能看到 。<br>如果没有这个的话，会有个很神奇的现象，就是账号可以传过来，但是密码获取不到，可以在服务端的登录日志<code>/var/log/openvpn/openvpn-login.log</code> 里查看日志！！！</p><h3 id="客户端添加账号密码文件省去手动输入账号密码"><a class="markdownIt-Anchor" href="#客户端添加账号密码文件省去手动输入账号密码"></a> 客户端添加账号密码文件省去手动输入账号密码</h3><p>如果客户端需要记住账号/密码，以Windows客户端 OpenVPN GUI 为例，可以在客户端安装路径下的config目录里修改 *.ovpn 配置文件的配置，添加指定账号密码文件login.conf （Mac客户端Tunnelblick试过不好使）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth-user-pass login.conf</span><br></pre></td></tr></table></figure><p>然后在客户端安装路径下的config目录里新增<code>login.conf</code> 文件，账号密码使用换行符分隔，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eddieeo</span><br><span class="line">c123456@</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:53:25 GMT+0800 (China Standard Time) --&gt;&lt;blockquote&gt;&lt;p&gt;使用账号密码人认证方式方便给多人分配不同的账号和密码，多人使用更加方便&lt;/p&gt;&lt;/blockquot
      
    
    </summary>
    
    
      <category term="CentOS" scheme="https://linuxops.fun/categories/CentOS/"/>
    
    
      <category term="OpenVPN" scheme="https://linuxops.fun/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下搭建OpenVPN</title>
    <link href="https://linuxops.fun/2017/05/29/140cbb13.html"/>
    <id>https://linuxops.fun/2017/05/29/140cbb13.html</id>
    <published>2017-05-29T12:16:12.000Z</published>
    <updated>2019-10-30T16:50:17.849Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:53:25 GMT+0800 (China Standard Time) --><img src="/2017/05/29/140cbb13/21032346546343646.png"><p>OpenVPN 是一个用于创建虚拟专用网络加密通道的软件包，最早是由James Yonan编写的。OpenVPN允许创建的VPN使用公开密钥、电子证书、或者用户名/密码来进行身份验证.。</p><p>目前OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Microsoft Windows以及Android和iOS上运行，并包含了许多安全性的功能。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。</p><h2 id="openvpn-serverclient部署流程图"><a class="markdownIt-Anchor" href="#openvpn-serverclient部署流程图"></a> OpenVPN Server/Client部署流程图</h2><blockquote><p>搭建n VPN 服务端—&gt;添加防火墙规则：snat—&gt;启动 open VPN 服务端—&gt;创建一个用户测试连接：创建客户端 CA 证书、生成 .ovpn 配置文件、打包相关文件供客户端使用。</p></blockquote><img src="/2017/05/29/140cbb13/97989646743203854.png"><h2 id="openvpn-服务端"><a class="markdownIt-Anchor" href="#openvpn-服务端"></a> OpenVPN 服务端</h2><h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3><p>由于不同环境及软件版本命令使用略有差异，特别是 easy-rsa 的使用在 2.0 和 3.0 的差别有点大，所以在此先说明下安装环境及相关软件版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System Version: CentOS7</span><br><span class="line">OpenVPN Version: 2.4.7</span><br><span class="line">Easy-rsa Version：3.0.6</span><br></pre></td></tr></table></figure><h3 id="安装与配置"><a class="markdownIt-Anchor" href="#安装与配置"></a> 安装与配置</h3><h4 id="1-安装-openvpn-easy-rsa-iptables-services"><a class="markdownIt-Anchor" href="#1-安装-openvpn-easy-rsa-iptables-services"></a> 1. 安装 openvpn、easy-rsa、iptables-services</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install epel-release# 安装第三方yum源</span><br><span class="line"># yum -y install openvpn easy-rsa iptables-services # 安装openvpn，easy-rsa等软件</span><br></pre></td></tr></table></figure><h4 id="2-使用-easy-rsa-生成需要的证书及相关文件"><a class="markdownIt-Anchor" href="#2-使用-easy-rsa-生成需要的证书及相关文件"></a> 2. 使用 easy-rsa 生成需要的证书及相关文件</h4><ul><li>CA 根证书</li><li>OpenVPN 服务器 ssl 证书</li><li>Diffie-Hellman 算法用到的 key</li></ul><h5 id="21-将-easy-rsa-脚本复制到-etcopenvpn目录下该脚本主要用来方便地生成-ca-证书和各种-key"><a class="markdownIt-Anchor" href="#21-将-easy-rsa-脚本复制到-etcopenvpn目录下该脚本主要用来方便地生成-ca-证书和各种-key"></a> 2.1 将 easy-rsa 脚本复制到 /etc/openvpn/目录下，该脚本主要用来方便地生成 CA 证书和各种 key</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp -r /usr/share/easy-rsa/ /etc/openvpn/</span><br></pre></td></tr></table></figure><h5 id="22-跳到-easy-rsa-目录并编辑-vars-文件添加一些生成证书时用到的变量"><a class="markdownIt-Anchor" href="#22-跳到-easy-rsa-目录并编辑-vars-文件添加一些生成证书时用到的变量"></a> 2.2 跳到 easy-rsa 目录并编辑 vars 文件，添加一些生成证书时用到的变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/openvpn/easy-rsa/&lt;easy-rsa 版本号&gt;/  # 查看 easy-rsa 版本号：yum info easy-rsa</span><br><span class="line"># vim vars  # 没这个文件的话新建，填写如下内容（变量值根据实际情况随便填写）: </span><br><span class="line">export KEY_COUNTRY=&quot;CN&quot;</span><br><span class="line">export KEY_PROVINCE=&quot;Guangdong Province&quot;</span><br><span class="line">export KEY_CITY=&quot;ShenZhen&quot;</span><br><span class="line">export KEY_ORG=&quot;Linuxops ORG&quot;</span><br><span class="line">export KEY_EMAIL=&quot;email@email.com&quot;</span><br><span class="line"></span><br><span class="line">然后执行以下命令，使vars文件的变量立即生效</span><br><span class="line"># source ./vars   # 使变量立即生效</span><br></pre></td></tr></table></figure><h5 id="23-生成-ca-根证书"><a class="markdownIt-Anchor" href="#23-生成-ca-根证书"></a> 2.3 生成 CA 根证书</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ./easyrsa init-pki    #初始化 pki 相关目录</span><br><span class="line"># ./easyrsa build-ca nopass  #生成 CA 根证书, 需要输入 Common Name，名字随便起，然后回车。</span><br></pre></td></tr></table></figure><h5 id="24-生成-openvpn-服务器证书和密钥"><a class="markdownIt-Anchor" href="#24-生成-openvpn-服务器证书和密钥"></a> 2.4 生成 OpenVPN 服务器证书和密钥</h5><p>第一个参数 server 为证书名称，可以随便起，比如 <code>./easyrsa build-server-full openvpn nopass</code></p><p>第二个参数 nopass 表示生成服务端密钥时不设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./easyrsa build-server-full server nopass</span><br></pre></td></tr></table></figure><h5 id="25-生成-diffie-hellman-算法需要的密钥文件"><a class="markdownIt-Anchor" href="#25-生成-diffie-hellman-算法需要的密钥文件"></a> 2.5 生成 Diffie-Hellman 算法需要的密钥文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./easyrsa gen-dh   # 创建Diffie-Hellman，这可能得等一小会儿</span><br></pre></td></tr></table></figure><h5 id="26-生成-tls-auth-key"><a class="markdownIt-Anchor" href="#26-生成-tls-auth-key"></a> 2.6 生成 tls-auth key</h5><p>这个 key 主要用于防止 DoS 和 TLS 攻击，这一步其实是可选的，但为了安全还是生成一下，该文件在后面配置 OpenVPN 的配置文件时会用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># openvpn --genkey --secret ta.key</span><br></pre></td></tr></table></figure><h5 id="27-将上面生成的相关证书文件整理到-etcopenvpnservercerts"><a class="markdownIt-Anchor" href="#27-将上面生成的相关证书文件整理到-etcopenvpnservercerts"></a> 2.7 将上面生成的相关证书文件整理到 /etc/openvpn/server/certs</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /etc/openvpn/server/certs &amp;&amp; cd /etc/openvpn/server/certs/</span><br><span class="line"># cp /etc/openvpn/easy-rsa/3/pki/dh.pem ./     # SSL 协商时 Diffie-Hellman 算法需要的 key</span><br><span class="line"># cp /etc/openvpn/easy-rsa/3/pki/ca.crt ./     # CA 根证书</span><br><span class="line"># cp /etc/openvpn/easy-rsa/3/pki/issued/server.crt ./    # OpenVPN 服务器证书</span><br><span class="line"># cp /etc/openvpn/easy-rsa/3/pki/private/server.key ./   # OpenVPN 服务器证书 key</span><br><span class="line"># cp /etc/openvpn/easy-rsa/3/ta.key ./   # 生成 tls-auth key 文件</span><br></pre></td></tr></table></figure><h5 id="28-创建-open-vpn-日志目录"><a class="markdownIt-Anchor" href="#28-创建-open-vpn-日志目录"></a> 2.8 创建 open VPN 日志目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p /var/log/openvpn/</span><br><span class="line"># chown openvpn:openvpn /var/log/openvpn</span><br></pre></td></tr></table></figure><h4 id="3-配置-openvpn"><a class="markdownIt-Anchor" href="#3-配置-openvpn"></a> 3. 配置 OpenVPN</h4><p>可以从 /usr/share/doc/openvpn-&lt;openvpn 版本号&gt;/sample/sample-config-files/server.conf 复制一份 demo 到 /etc/openvpn/（openvpn 版本号查看：yum info openvpn。）然后改改，或者从头开始创建一个新的配置文件。我选择新建配置，执行以下命令新建server.conf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/openvpn  # 切换到openvpn配置文件目录下</span><br><span class="line"># vim server.conf  # 新建server.conf配置文件</span><br></pre></td></tr></table></figure><p>server.conf 文件填入如下内容，很多配置项不需要特别了解，重要的配置这里已经添加注释了，其他相关配置项想了解的话可以单击这个链接 <a href="https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage" target="_blank" rel="noopener">https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage</a></p><blockquote><p>注：配置文件中<code>;</code>开头的表示该行配置被注释， # 号后面表示该行配置的解释</p></blockquote><p>server.conf 文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">####################################################################</span><br><span class="line"># 针对多客户端的OpenVPN 2.4的服务器端配置文件示例</span><br><span class="line">#</span><br><span class="line"># 本文件用于多客户端&lt;-&gt;单服务器端的OpenVPN服务器端配置</span><br><span class="line">#</span><br><span class="line"># OpenVPN也支持单机&lt;-&gt;单机的配置(更多信息请查看网站上的示例页面)</span><br><span class="line">#</span><br><span class="line"># 该配置支持Windows或者Linux/BSD系统。此外，在Windows上，记得将路径加上双引号，</span><br><span class="line"># 并且使用两个反斜杠，例如：&quot;C:\\Program Files\\OpenVPN\\config\\foo.key&quot;</span><br><span class="line">#</span><br><span class="line"># &apos;#&apos; or &apos;;&apos;开头的均为注释内容</span><br><span class="line">###################################################################</span><br><span class="line"></span><br><span class="line"># OpenVPN监听本机的哪些IP地址，该命令是可选的，如果不设置，则默认监听本机的所有IP地址</span><br><span class="line">;local a.b.c.d</span><br><span class="line"># 监听的端口号</span><br><span class="line">port 1194</span><br><span class="line"># 服务端用的协议tcp/udp，udp能快点，所以我选择udp</span><br><span class="line">proto udp</span><br><span class="line"></span><br><span class="line"># 默认使用路由模式，tap是桥接模式</span><br><span class="line"># 指定OpenVPN创建的通信隧道类型</span><br><span class="line"># &quot;dev tun&quot;将会创建一个路由IP隧道</span><br><span class="line"># &quot;dev tap&quot;将会创建一个以太网隧道</span><br><span class="line"># 如果你是以太网桥接模式，并且提前创建了一个名为&quot;tap0&quot;的与以太网接口进行桥接的虚拟接口，则你可以使用&quot;dev tap0&quot;</span><br><span class="line"># 如果你想控制VPN的访问策略，你必须为TUN/TAP接口创建防火墙规则</span><br><span class="line"># 在非Windows系统中，你可以给出明确的单位编号(unit number)，例如&quot;tun0&quot;</span><br><span class="line"># 在Windows中，你也可以使用&quot;dev-node&quot;</span><br><span class="line"># 在多数系统中，除非你部分禁用或者完全禁用了TUN/TAP接口的防火墙，否则VPN将不起作用</span><br><span class="line">;dev tap</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"># 如果你想配置多个隧道，你需要用到网络连接面板中TAP-Win32适配器的名称例如&quot;MyTap&quot;)</span><br><span class="line"># 在XP SP2或更高版本的系统中，你可能需要有选择地禁用掉针对TAP适配器的防火墙</span><br><span class="line"># 通常情况下，非Windows系统则不需要该指令。</span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"># CA根证书路径</span><br><span class="line">ca /etc/openvpn/server/certs/ca.crt</span><br><span class="line"># OpenVPN服务端证书路径</span><br><span class="line">cert /etc/openvpn/server/certs/server.crt</span><br><span class="line"># OpenVPN服务端密钥路径</span><br><span class="line">key /etc/openvpn/server/certs/server.key</span><br><span class="line"># Diffie-Hellman算法密钥文件路径</span><br><span class="line">dh /etc/openvpn/server/certs/dh.pem</span><br><span class="line"></span><br><span class="line"># 出于SSL/TLS之外更多的安全考虑，创建一个&quot;HMAC 防火墙&quot;可以帮助抵御DoS攻击和UDP端口淹没攻击。</span><br><span class="line"># 你可以使用以下命令来生成：</span><br><span class="line">#   openvpn --genkey --secret ta.key</span><br><span class="line"># 服务器和每个客户端都需要拥有该密钥的一个拷贝。</span><br><span class="line"># 第二个参数在服务器端应该为&apos;。</span><br><span class="line"># tls-auth key，参数0可以省略，如果不省略，那么客户端配置文件相应的参数tls-auth该配成 1。如果省略，那么客户端不需要 tls-auth 配置</span><br><span class="line">tls-auth /etc/openvpn/server/certs/ta.key 0</span><br><span class="line"></span><br><span class="line"># 选择一个密码加密算法。</span><br><span class="line"># 该配置项也必须复制到每个客户端配置文件中。</span><br><span class="line">;cipher BF-CBC        # Blowfish (默认)</span><br><span class="line">;cipher AES--CBC      # AES</span><br><span class="line">;cipher DES-EDE3-CBC  # Triple-DES</span><br><span class="line"></span><br><span class="line"># 该网段为OpenVPN虚拟网卡网段，不要和内网网段冲突即可。OpenVPN默认使用10.8.0.0/24网段为客户端分配IP地址</span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line"># 指定用于记录客户端和虚拟IP地址的关联关系的文件，当重启OpenVPN时，再次连接的客户端将分配到与上一次分配相同的虚拟IP地址</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"></span><br><span class="line"># 主DNS服务器配置，可以根据需要指定其他DNS</span><br><span class="line">push &quot;dhcp-option DNS 8.8.8.8&quot;</span><br><span class="line"># 备DNS服务器配置，可以根据需要指定其他DNS</span><br><span class="line">push &quot;dhcp-option DNS 8.8.4.4&quot;</span><br><span class="line"></span><br><span class="line"># 推送路由信息到客户端，告诉客户端连接172.18.0.0/16这个网段的流量通过openvpn转发，以允许客户端能够连接到服务端背后的其他私有子网;</span><br><span class="line"># 其中172.18.0.0/16网段是你要连接的openvpn服务端的私网ip地址段，类似于局部代理;</span><br><span class="line"># 使客户端机器在浏览器访问其他正常网页时由本地网卡出去，从而达到不影响本地网络的网速。</span><br><span class="line">push &quot;route 172.18.0.0 255.255.0.0&quot;</span><br><span class="line"></span><br><span class="line"># 客户端所有流量都通过open VPN虚拟网卡转发，类似于全局代理，这样客户端在浏览器访问其他正常网站时;</span><br><span class="line"># 也是通过OpenVPN虚拟网卡出去访问，会严重影响客户端访问正常网页的网速</span><br><span class="line">;push &quot;redirect-gateway def1&quot;</span><br><span class="line"></span><br><span class="line"># 该指令仅针对以太网桥接模式。</span><br><span class="line"># 首先，你必须使用操作系统的桥接能力将以太网网卡接口和TAP接口进行桥接。</span><br><span class="line"># 然后，你需要手动设置桥接接口的IP地址、子网掩码；</span><br><span class="line"># 在这里，我们假设为10.。</span><br><span class="line"># 最后，我们必须指定子网的一个IP范围(例如从10.8.0.50开始，到10.8.0.100结束)，以便于分配给连接的客户端。</span><br><span class="line"># 如果你不是以太网桥接模式，直接注释掉这行指令即可。</span><br><span class="line">;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100</span><br><span class="line"></span><br><span class="line"># 该指令仅针对使用DHCP代理的以太网桥接模式，</span><br><span class="line"># 此时客户端将请求服务器端的DHCP服务器，从而获得分配给它的IP地址和DNS服务器地址。</span><br><span class="line"># 在此之前，你也需要先将以太网网卡接口和TAP接口进行桥接。</span><br><span class="line"># 注意：该指令仅用于OpenVPN客户端，并且该客户端的TAP适配器需要绑定到一个DHCP客户端上。</span><br><span class="line">;server-bridge</span><br><span class="line"></span><br><span class="line"># 允许一个用户多个终端连接</span><br><span class="line"># 如果多个客户端可能使用相同的证书/私钥文件或Common Name进行连接，那么你可以取消该指令的注释。</span><br><span class="line"># 建议该指令仅用于测试目的。对于生产使用环境而言，每个客户端都应该拥有自己的证书和私钥。</span><br><span class="line"># 如果你没有为每个客户端分别生成Common Name唯一的证书/私钥，你可以取消该行的注释(但不推荐这样做)。</span><br><span class="line">;duplicate-cn</span><br><span class="line"></span><br><span class="line"># keepalive指令将导致类似于ping命令的消息被来回发送，以便于服务器端和客户端知道对方何时被关闭。</span><br><span class="line"># 每10秒钟ping一次，如果120秒内都没有收到对方的回复，则表示远程连接已经关闭。</span><br><span class="line">keepalive 10 120</span><br><span class="line"></span><br><span class="line"># 在VPN连接上启用压缩。</span><br><span class="line"># 如果你在此处启用了该指令，那么也应该在每个客户端配置文件中启用它。</span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"># 允许并发连接的客户端的最大数量</span><br><span class="line">;max-clients</span><br><span class="line"></span><br><span class="line"># 去掉该指令的注释将允许不同的客户端之间相互&quot;可见&quot;(允许客户端之间互相访问)。</span><br><span class="line"># 该选项允许连接openvpn的客户端直接通讯而不经过openvpn服务端网关。</span><br><span class="line"># 默认情况下，客户端只能&quot;看见&quot;服务器。为了确保客户端只能看见服务器，你还可以在服务器端的TUN/TAP接口上设置适当的防火墙规则。</span><br><span class="line">client-to-client</span><br><span class="line"></span><br><span class="line"># 持久化选项可以尽量避免访问那些在重启之后由于用户权限降低而无法访问的某些资源。</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"># OpenVPN进程启动用户，OpenVPN用户在安装完openvpn安装包后就自动生成了</span><br><span class="line"># 在完成初始化工作之后，降低OpenVPN守护进程的权限是个不错的主意。</span><br><span class="line"># 该指令仅限于非Windows系统中使用。</span><br><span class="line">user openvpn</span><br><span class="line">group openvpn</span><br><span class="line"></span><br><span class="line"># 默认情况下，日志消息将写入syslog(在Windows系统中，如果以服务方式运行，日志消息将写入OpenVPN安装目录的log文件夹中)。</span><br><span class="line"># 你可以使用log或者log-append来改变这种默认情况。</span><br><span class="line"># &quot;log&quot;方式在每次启动时都会清空之前的日志文件。</span><br><span class="line"># &quot;log-append&quot;这是在之前的日志内容后进行追加。</span><br><span class="line"># 你可以使用两种方式之一(但不要同时使用)。</span><br><span class="line">;log        /var/log/openvpn/openvpn.log</span><br><span class="line">log-append  /var/log/openvpn/openvpn.log</span><br><span class="line"># 输出一个简短的状态文件，用于显示当前的连接状态，该文件每分钟都会清空并重写一次。</span><br><span class="line">status /var/log/openvpn/openvpn-status.log</span><br><span class="line"></span><br><span class="line"># 为日志文件设置适当的冗余级别(~)。冗余级别越高，输出的信息越详细。</span><br><span class="line"># 0 表示静默运行，只记录致命错误。</span><br><span class="line"># 4 表示合理的常规用法。</span><br><span class="line"># 5 可以帮助调试连接错误。</span><br><span class="line"># 9 表示极度冗余，输出非常详细的日志信息。</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"># 重复信息的沉默度。</span><br><span class="line"># 相同类别的信息只有前20条会输出到日志文件中。</span><br><span class="line">;mute</span><br><span class="line"></span><br><span class="line"># 当服务端重新启动时，通知客户端可以自动重新连接。</span><br><span class="line"># 当proto使用tcp时，需要注销该行配置，否则会导致服务端无法启动</span><br><span class="line">explicit-exit-notify 1</span><br><span class="line"></span><br><span class="line"># 为指定的客户端分配指定的IP地址，或者客户端背后也有一个私有子网想要访问VPN，</span><br><span class="line"># 那么你可以针对该客户端的配置文件使用ccd子目录。</span><br><span class="line"># (简而言之，就是允许客户端所在的局域网成员也能够访问VPN) </span><br><span class="line"># 举个例子：假设有个Common Name为/255.255.255.248。</span><br><span class="line"># 首先，你需要去掉下面两行指令的注释：</span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route 192.168.40.128 255.255.255.248</span><br><span class="line"># 然后创建一个文件ccd/Thelonious，该文件的内容为：</span><br><span class="line">#   iroute 192.168.40.128 255.255.255.248</span><br><span class="line"></span><br><span class="line"># 这样客户端所在的局域网就可以访问VPN了。</span><br><span class="line"># 注意，这个指令只能在你是基于路由、而不是基于桥接的模式下才能生效。</span><br><span class="line"># 比如，你使用了&quot;dev tun&quot;和&quot;server&quot;指令。</span><br><span class="line"># 再举个例子：假设你想给Thelonious分配一个固定的IP地址10.。</span><br><span class="line"># 首先，你需要去掉下面两行指令的注释：</span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route 10.9.0.0 255.255.255.252</span><br><span class="line"># 然后在文件ccd/Thelonious中添加如下指令：</span><br><span class="line">#   ifconfig-push 10.9.0.1 10.9.0.2</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 如果你想要为不同群组的客户端启用不同的防火墙访问策略，你可以使用如下两种方法：</span><br><span class="line"># 运行多个OpenVPN守护进程，每个进程对应一个群组，并为每个进程(群组)启用适当的防火墙规则。</span><br><span class="line"># (进阶)创建一个脚本来动态地修改响应于来自不同客户的防火墙规则。</span><br><span class="line"># 关于learn-address脚本的更多信息请参考官方手册页面。</span><br><span class="line">;learn-address ./script</span><br></pre></td></tr></table></figure><h4 id="4防火墙相关配置使用-iptables-添加-snat-规则"><a class="markdownIt-Anchor" href="#4防火墙相关配置使用-iptables-添加-snat-规则"></a> 4.防火墙相关配置（使用 iptables 添加 snat 规则）</h4><h5 id="41-禁用-centos7-默认的-firewalld使用经典的-iptables-防火墙管理软件"><a class="markdownIt-Anchor" href="#41-禁用-centos7-默认的-firewalld使用经典的-iptables-防火墙管理软件"></a> 4.1 禁用 Centos7 默认的 firewalld，使用经典的 iptables 防火墙管理软件：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl stop firewalld    # 停用系统默认的firewalld防火墙</span><br><span class="line"># systemctl mask firewalld    # 注销firewalld防火墙服务</span><br></pre></td></tr></table></figure><h5 id="42-禁用-selinux"><a class="markdownIt-Anchor" href="#42-禁用-selinux"></a> 4.2 禁用 SELinux</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># setenforce 0 # 马上关闭，立即生效</span><br><span class="line"># sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/g&apos; /etc/selinux/config    # 需要重启服务器生效</span><br></pre></td></tr></table></figure><h5 id="43-启用iptables"><a class="markdownIt-Anchor" href="#43-启用iptables"></a> 4.3 启用iptables</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable iptables  # 开机自启动</span><br><span class="line"># systemctl start iptables # 立即启动</span><br><span class="line"># iptables -F   # 清理防火墙默认filter表规则，使用-t选项指定表，默认filter表，还有nat,mangle表</span><br></pre></td></tr></table></figure><h5 id="44-添加防火墙规则将-openvpn-的网络流量转发到公网snat-规则"><a class="markdownIt-Anchor" href="#44-添加防火墙规则将-openvpn-的网络流量转发到公网snat-规则"></a> 4.4 添加防火墙规则，将 openvpn 的网络流量转发到公网：snat 规则</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE</span><br><span class="line"># iptables-save &gt; /etc/sysconfig/iptables   # iptables 规则持久化保存</span><br></pre></td></tr></table></figure><h5 id="45-linux-服务器启用内核地址转发"><a class="markdownIt-Anchor" href="#45-linux-服务器启用内核地址转发"></a> 4.5 Linux 服务器启用内核地址转发</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># echo &apos;net.ipv4.ip_forward = 1&apos; &gt;&gt; /etc/sysctl.conf</span><br><span class="line"># sysctl -p # 使配置立即生效，这一步一定要执行，否则配置未生效。</span><br></pre></td></tr></table></figure><h4 id="5启动-open-vpn"><a class="markdownIt-Anchor" href="#5启动-open-vpn"></a> 5.启动 open VPN</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start openvpn@server  # 启动</span><br><span class="line"># systemctl enable openvpn@server # 开机自启动</span><br><span class="line"># systemctl status openvpn@server # 查看服务状态</span><br></pre></td></tr></table></figure><p>至此，OpenVPN服务端搭建完成。</p><h2 id="openvpn客户端部署"><a class="markdownIt-Anchor" href="#openvpn客户端部署"></a> OpenVPN客户端部署</h2><p>OpenVPN 服务端搭建完了，但是我们该如何使用呢？下面以 Windows 平台下使用为例：</p><h3 id="安装客户端软件"><a class="markdownIt-Anchor" href="#安装客户端软件"></a> 安装客户端软件</h3><p>要连接到 open VPN 服务端首先得需要一个客户端软件，在 Windows 下推荐使用 <a href="https://openvpn.net/community-downloads/" target="_blank" rel="noopener">OpenVPN GUI</a>，下载地址： <a href="https://openvpn.net/community-downloads/" target="_blank" rel="noopener">https://openvpn.net/community-downloads/</a> 。OpenVPN GUI 是一个开源、免费的 Windows 版 OpenVPN 客户端软件，下载安装好OpenVPN GUI 软件。</p><h3 id="创建一个openvpn用户"><a class="markdownIt-Anchor" href="#创建一个openvpn用户"></a> 创建一个OpenVPN用户</h3><p>创建一个OpenVPN用户的方法有两种，一种是客户端使用证书密钥的认证方式连接OpenVPN服务端，一种是客户端使用用户密码的认证方式连接OpenVPN服务端，这里以客户端使用证书密钥登录的认证方式为例，关于用户密码认证方式可以查看我的博客中的 <em><strong>OpenVPN使用账号密码认证方式登陆</strong></em> 这篇博文。</p><h4 id="创建客户端证书以及相关配置文件"><a class="markdownIt-Anchor" href="#创建客户端证书以及相关配置文件"></a> 创建客户端证书以及相关配置文件</h4><p>接下来在服务端创建一个 OpenVPN 用户：其实创建用户的过程就是生成客户端 SSL 证书的过程，然后将其他相关的证书文件、key、.ovpn文件（客户端配置文件）打包到一起供客户端使用。由于创建一个用户的过程比较繁琐，所以在此将整个过程写成了一个脚本 ovpn_user.sh，脚本内容比较简单，一看就懂：</p><p>首先创建一个客户端配置模板文件 sample.ovpn，该文件在创建OpenVPN用户的脚本中会用到，放到 /etc/openvpn/client/ 目录下，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/openvpn/client/</span><br><span class="line"># vim sample.ovpn</span><br></pre></td></tr></table></figure><p>sample.ovpn文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">################################################################</span><br><span class="line"># 针对多个客户端的OpenVPN 2.0 的客户端配置文件示例</span><br><span class="line">#</span><br><span class="line"># 该配置文件可以被多个客户端使用，当然每个客户端都应该有自己的证书和密钥文件</span><br><span class="line">#</span><br><span class="line"># 在Windows上此配置文件的后缀应该是&quot;.ovpn&quot;，在Linux/BSD系统中则是&quot;.conf&quot;</span><br><span class="line">################################################################</span><br><span class="line"></span><br><span class="line"># 指定这是一个客户端，将从服务器上获取某些配置文件指令</span><br><span class="line">client</span><br><span class="line"></span><br><span class="line"># 指定连接的服务器是采用TCP还是UDP协议。</span><br><span class="line"># 这里需要使用与服务器端相同的设置。</span><br><span class="line">;proto tcp</span><br><span class="line">proto udp</span><br><span class="line"></span><br><span class="line"># 指定OpenVPN创建的通信隧道类型。</span><br><span class="line"># &quot;dev tun&quot;将会创建一个路由IP隧道，</span><br><span class="line"># &quot;dev tap&quot;将会创建一个以太网隧道。</span><br><span class="line"># 如果你是以太网桥接模式，并且提前创建了一个名为&quot;tap0&quot;的与以太网接口进行桥接的虚拟接口，则你可以使用&quot;dev tap0&quot;</span><br><span class="line"># 如果你想控制VPN的访问策略，你必须为TUN/TAP接口创建防火墙规则。</span><br><span class="line"># 在非Windows系统中，你可以给出明确的单位编号(unit number)，例如&quot;tun0&quot;。</span><br><span class="line"># 在Windows中，你也可以使用&quot;dev-node&quot;。</span><br><span class="line"># 在多数系统中，除非你部分禁用或者完全禁用了TUN/TAP接口的防火墙，否则VPN将不起作用</span><br><span class="line">;dev tap</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"># 指定服务端的主机名或者IP以及端口</span><br><span class="line"># 如果有多个VPN服务器，为了实现负载均衡，可以设置多个remote指令</span><br><span class="line">remote [OpenVPN服务端公网 ip，根据实际情况填写] 1194</span><br><span class="line"></span><br><span class="line"># 如果开启多个remote指令，启动该指令将随机连接其中的一台服务器</span><br><span class="line"># 否则，客户端将按照指定的先后顺序依次尝试连接</span><br><span class="line">;remote-random</span><br><span class="line"> </span><br><span class="line"># 启用该指令，与服务器连接中断后将自动重新连接，这在网络不稳定的情况下(例如：笔记本电脑无线网络)非常有用。</span><br><span class="line">resolv-retry infinite</span><br><span class="line"> </span><br><span class="line"># 大多数客户端不需要绑定本机特定的端口号</span><br><span class="line">nobind</span><br><span class="line"> </span><br><span class="line"># 在初始化完毕后，降低OpenVPN的权限(该指令仅限于非Windows系统中使用)</span><br><span class="line">;user openvpn</span><br><span class="line">;group openvpn</span><br><span class="line"></span><br><span class="line"># SSL/TLS 参数配置。</span><br><span class="line"># 更多描述信息请参考服务器端配置文件。</span><br><span class="line"># 最好为每个客户端单独分配.crt/.key文件对。</span><br><span class="line"># 单个CA证书可以供所有客户端使用。</span><br><span class="line">ca ca.crt</span><br><span class="line">cert admin.crt</span><br><span class="line">key admin.key</span><br><span class="line"></span><br><span class="line"># 指定采用服务器校验方式</span><br><span class="line">remote-cert-tls server</span><br><span class="line"></span><br><span class="line"># 如果服务器端使用了tls-auth密钥，那么每个客户端也都应该有该密钥。</span><br><span class="line">tls-auth ta.key 1</span><br><span class="line"></span><br><span class="line"># 指定密码的加密算法。</span><br><span class="line"># 如果服务器端启用了cipher指令选项，那么你必须也在这里指定它</span><br><span class="line">;cipher AES--CBC</span><br><span class="line"></span><br><span class="line"># 持久化选项可以尽量避免访问在重启时由于用户权限降低而无法访问的某些资源</span><br><span class="line">persist-tun</span><br><span class="line">persist-key</span><br><span class="line"></span><br><span class="line"># 如果你是通过HTTP代理方式来连接到实际的VPN服务器，请在此处指定代理服务器的主机名(或IP)和端口号。</span><br><span class="line"># 如果你的代理服务器需要身份认证，请参考官方手册页面</span><br><span class="line">;http-proxy-retry # 如果失败将重试</span><br><span class="line">;http-proxy [proxy server] [proxy port #]</span><br><span class="line"></span><br><span class="line"># 无线网络通常会产生大量的重复数据包。设置此标识将忽略掉重复数据包的警告信息</span><br><span class="line">mute-replay-warnings</span><br><span class="line"></span><br><span class="line"># 在VPN连接中启用压缩。</span><br><span class="line"># 该指令的启用/禁用应该与服务器端保持一致。</span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"># 设置日志文件冗余级别(~)。</span><br><span class="line">#  表示静默运行，只记录致命错误。</span><br><span class="line">#  表示合理的常规用法。</span><br><span class="line">#  和  可以帮助调试连接错误。</span><br><span class="line">#  表示极度冗余，输出非常详细的日志信息</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"># 忽略过多的重复信息。</span><br><span class="line"># 相同类别的信息只有前20条会输出到日志文件中。</span><br><span class="line">;mute </span><br><span class="line"></span><br><span class="line"># 该参数能防止密码被缓存到内存中</span><br><span class="line">auth-nocache</span><br></pre></td></tr></table></figure><p>下面编写创建 OpenVPN 用户的脚本add_vpn_user.sh，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/openvpn/client</span><br><span class="line"># vim add_vpn_user.sh</span><br></pre></td></tr></table></figure><p>add_vpn_user.sh脚本内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">OVPN_USER_KEYS_DIR=/etc/openvpn/client/keys</span><br><span class="line">EASY_RSA_VERSION=3</span><br><span class="line">EASY_RSA_DIR=/etc/openvpn/easy-rsa/</span><br><span class="line">PKI_DIR=$EASY_RSA_DIR/$EASY_RSA_VERSION/pki</span><br><span class="line"></span><br><span class="line">for user in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">  if [ -d &quot;$OVPN_USER_KEYS_DIR/$user&quot; ]; then</span><br><span class="line">    rm -rf $OVPN_USER_KEYS_DIR/$user</span><br><span class="line">    rm -rf  $PKI_DIR/reqs/$user.req</span><br><span class="line">    sed -i &apos;/&apos;&quot;$user&quot;&apos;/d&apos; $PKI_DIR/index.txt</span><br><span class="line">  fi</span><br><span class="line">  cd $EASY_RSA_DIR/$EASY_RSA_VERSION</span><br><span class="line">  # 生成客户端 ssl 证书文件</span><br><span class="line">  ./easyrsa build-client-full $user nopass</span><br><span class="line">  # 整理下生成的文件</span><br><span class="line">  mkdir -p  $OVPN_USER_KEYS_DIR/$user</span><br><span class="line">  cp $PKI_DIR/ca.crt $OVPN_USER_KEYS_DIR/$user/   # CA 根证书</span><br><span class="line">  cp $PKI_DIR/issued/$user.crt $OVPN_USER_KEYS_DIR/$user/   # 客户端证书</span><br><span class="line">  cp $PKI_DIR/private/$user.key $OVPN_USER_KEYS_DIR/$user/  # 客户端证书密钥</span><br><span class="line">  cp /etc/openvpn/client/sample.ovpn $OVPN_USER_KEYS_DIR/$user/$user.ovpn # 客户端配置文件</span><br><span class="line">  sed -i &apos;s/admin/&apos;&quot;$user&quot;&apos;/g&apos; $OVPN_USER_KEYS_DIR/$user/$user.ovpn</span><br><span class="line">  cp /etc/openvpn/server/certs/ta.key $OVPN_USER_KEYS_DIR/$user/ta.key  # auth-tls 文件</span><br><span class="line">  cd $OVPN_USER_KEYS_DIR</span><br><span class="line">  zip -r $user.zip $user</span><br><span class="line">done</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><blockquote><p>注：执行上面的脚本创建一个OpenVPN用户，脚本用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; # sh add_vpn_user.sh &lt;username&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>其中 username 可以随意命名</p></blockquote><p>执行完创建用户的脚本后会在 /etc/openvpn/client/keys 目录下生成以<username>命名的 zip 打包文件，将该压缩包下载到本地解压，然后将里面的客户端证书和key以及<username>.ovpn 文件拖拽到 OpenVPN GUI 客户端软件安装路径下的config目录下即可使用。<br>zip压缩包里面的文件如下，示例：</username></username></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ca.crt</span><br><span class="line">├── username.crt</span><br><span class="line">├── username.key</span><br><span class="line">├── username.ovpn</span><br><span class="line">└── ta.key</span><br></pre></td></tr></table></figure><p>至此，OpenVPN客户端安装配置完成，测试连接OpenVPN服务端，见如下图所示，表示连接成功并可以服务端通信了。</p><img src="/2017/05/29/140cbb13/20191030123330756.png"><p></p><img src="/2017/05/29/140cbb13/620191030123503224.png"><h3 id="删除一个-openvpn-用户"><a class="markdownIt-Anchor" href="#删除一个-openvpn-用户"></a> 删除一个 OpenVPN 用户</h3><p>上面我们知道了如何添加一个用户，那么如果公司员工离职了或者其他原因，想删除对应用户 OpenVPN 的使用权，该如何操作呢？其实很简单，OpenVPN 的客户端和服务端的认证主要通过 SSL 证书进行双向认证，所以只要吊销对应用户的 SSL 证书，分别执行以下3个步骤即可。</p><ol><li>吊销用户证书，假设要吊销的用户名为 username</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/openvpn/easy-rsa/3/</span><br><span class="line"># ./easyrsa revoke username</span><br><span class="line"># ./easyrsa gen-crl</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑 OpenVPN 服务端配置文件 server.conf 添加如下配置:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># crl-verify /etc/openvpn/easy-rsa/3/pki/crl.pem</span><br></pre></td></tr></table></figure><ol start="3"><li>重启 OpenVPN 服务端使其生效</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start openvpn@server</span><br></pre></td></tr></table></figure><p>为了方便，也将上面步骤整理成了一个脚本，执行以下命令，创建一键删除OpenVPN用户的脚del_vpn_user.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/openvpn/client</span><br><span class="line"># vim add_vpn_user.sh</span><br></pre></td></tr></table></figure><p>del_vpn_user.sh脚本内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">set -e</span><br><span class="line">OVPN_USER_KEYS_DIR=/etc/openvpn/client/keys</span><br><span class="line">EASY_RSA_VERSION=3</span><br><span class="line">EASY_RSA_DIR=/etc/openvpn/easy-rsa/</span><br><span class="line"></span><br><span class="line">for user in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">  cd $EASY_RSA_DIR/$EASY_RSA_VERSION</span><br><span class="line">  echo -e &apos;yes\n&apos; | ./easyrsa revoke $user</span><br><span class="line">  ./easyrsa gen-crl</span><br><span class="line">  # 吊销掉证书后清理客户端相关文件</span><br><span class="line">  if [ -d &quot;$OVPN_USER_KEYS_DIR/$user&quot; ]; then</span><br><span class="line">    rm -rf $OVPN_USER_KEYS_DIR/$&#123;user&#125;*</span><br><span class="line">  fi</span><br><span class="line">  systemctl restart openvpn@server</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><blockquote><p>注：执行上面的脚本创建一个OpenVPN用户，脚本用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; # sh del_vpn_user.sh &lt;username&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>其中 username 是你要删除的OpenVPN用户名</p></blockquote><h2 id="安装过程中遇到的问题及解决方法"><a class="markdownIt-Anchor" href="#安装过程中遇到的问题及解决方法"></a> 安装过程中遇到的问题及解决方法</h2><h4 id="问题-1"><a class="markdownIt-Anchor" href="#问题-1"></a> 问题 1：</h4><p>搭建好OpenVPN，配置好server.conf文件和iptables防火墙后，使用systemctl无法启动openvpn 服务端。</p><h4 id="问题原因及解决方法"><a class="markdownIt-Anchor" href="#问题原因及解决方法"></a> 问题原因及解决方法：</h4><p>可以查看/var/log/openvpn/openvpn.log日志文件，查看报错；或者执行 <code>journalctl -u openvpn@server</code> 看看log报什么错。 博主出现服务端无法启动的原因是服务端配置文件的注释内容格式(中文字符一行太长)有问题导致无法启动服务端，只要将注释分成多行即可。</p><h4 id="问题-2"><a class="markdownIt-Anchor" href="#问题-2"></a> 问题 2：</h4><p>open VPN 客户端可以正常连接到服务端，但是无法上网，ping 任何地址都不通，只有服务端公网 ip 可以 ping 通。</p><h4 id="问题原因及解决方法-2"><a class="markdownIt-Anchor" href="#问题原因及解决方法-2"></a> 问题原因及解决方法：</h4><p>主要原因是服务的地址转发功能没打开，其实我前面配置了 echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf，但是没有执行 sysctl -p 使其立即生效，所以才导致出现问题。因此一定要记得两条命令都要执行。</p><h4 id="问题-3"><a class="markdownIt-Anchor" href="#问题-3"></a> 问题 3:</h4><p>open VPN 可以正常使用，但是看客户端日志却有如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-06-15 02:39:03.957926 AEAD Decrypt error: bad packet ID (may be a replay): [ #6361 ] -- see the man page entry for --no-replay and --replay-window for more info or silence this warning with --mute-replay-warnings</span><br><span class="line">2019-06-15 02:39:23.413750 AEAD Decrypt error: bad packet ID (may be a replay): [ #6508 ] -- see the man page entry for --no-replay and --replay-window for more info or silence this warning with --mute-replay-warnings</span><br></pre></td></tr></table></figure><h4 id="问题原因及解决方法-3"><a class="markdownIt-Anchor" href="#问题原因及解决方法-3"></a> 问题原因及解决方法：</h4><p>其实这个问题一般在 open VPN 是 UDP 服务的情况下出现，主要原因是 UDP 数据包重复发送导致，在 Wi-Fi 网络下经常出现，这并不影响使用，但是我们可以选择禁止掉该错误：根据错误提示可知使用 –mute-replay-warnings 参数可以消除该警告，我们使用的 open VPN 是 GUI 的，所以修改客户端 .ovpn 配置文件，末尾添加：mute-replay-warnings 即可解决。</p><p>该问题在这里有讨论：<br><a href="https://sourceforge.net/p/openvpn/mailman/message/10655695/" target="_blank" rel="noopener">https://sourceforge.net/p/openvpn/mailman/message/10655695/</a></p><h2 id="相关文档"><a class="markdownIt-Anchor" href="#相关文档"></a> 相关文档</h2><p>关于 open VPN 客户端和服务端配置文件配置项说明：很全面，可以随时查看不懂的配置项</p><p><a href="https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage" target="_blank" rel="noopener">https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage</a></p><p><a href="https://openvpn.net/" target="_blank" rel="noopener">https://openvpn.net/</a> | OpenVPN 官网</p><p><a href="https://www.bbsmax.com/A/D854pyPw5E/" target="_blank" rel="noopener">https://www.bbsmax.com/A/D854pyPw5E/</a></p><p><a href="https://www.fandenggui.com/post/centos7-install-openvpn.html" target="_blank" rel="noopener">https://www.fandenggui.com/post/centos7-install-openvpn.html</a> | Centos7 安装 OpenVPN<br><a href="https://www.howtoing.com/how-to-install-openvpn-on-centos-7" target="_blank" rel="noopener">https://www.howtoing.com/how-to-install-openvpn-on-centos-7</a> | Centos7 安装 OpenVPN</p><p><a href="https://www.xiaohui.com/dev/server/20070904-revoke-openvpn-client.htm" target="_blank" rel="noopener">https://www.xiaohui.com/dev/server/20070904-revoke-openvpn-client.htm</a> | 吊销客户端证书<br><a href="https://scott.stevensononthe.net/2015/02/how-to-addremove-additional-users-to-openvpn/" target="_blank" rel="noopener">https://scott.stevensononthe.net/2015/02/how-to-addremove-additional-users-to-openvpn/</a> | 吊销客户端证书<br><a href="https://tunnelblick.net/cConnectedBut.html" target="_blank" rel="noopener">https://tunnelblick.net/cConnectedBut.html</a> | open VPN 一些常见问题<br><a href="https://tunnelblick.net/ipinfo" target="_blank" rel="noopener">https://tunnelblick.net/ipinfo</a> | 本地公网 ip 查看</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:53:25 GMT+0800 (China Standard Time) --&gt;&lt;img src=&quot;/2017/05/29/140cbb13/21032346546343646.png&quot;&gt;&lt;p&gt;OpenVPN 
      
    
    </summary>
    
    
      <category term="CentOS" scheme="https://linuxops.fun/categories/CentOS/"/>
    
    
      <category term="OpenVPN" scheme="https://linuxops.fun/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>ShadowsocksR使用进阶</title>
    <link href="https://linuxops.fun/2016/06/12/1b6ecda8.html"/>
    <id>https://linuxops.fun/2016/06/12/1b6ecda8.html</id>
    <published>2016-06-12T14:19:12.000Z</published>
    <updated>2019-10-30T16:46:16.334Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><h3 id="shadowsocksr服务端常用命令"><a class="markdownIt-Anchor" href="#shadowsocksr服务端常用命令"></a> ShadowsocksR服务端常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/shadowsocks start  # 启动shadowsocksR服务</span><br><span class="line"># /etc/init.d/shadowsocks stop  # 停止shadowsocksR服务</span><br><span class="line"># /etc/init.d/shadowsocks restart  # 重启shadowsocksR服务</span><br><span class="line"># /etc/init.d/shadowsocks status  # 查看shadowsocksR服务</span><br></pre></td></tr></table></figure><h3 id="shadowsocksr服务端修改密码-配置多端口教程"><a class="markdownIt-Anchor" href="#shadowsocksr服务端修改密码-配置多端口教程"></a> ShadowsocksR服务端修改密码、配置多端口教程</h3><p>(1）远程连接服务器，编辑ShadowsocksR服务的配置文件，输入<code>vim /etc/shadowsocks.json</code></p><p>(2）按“<code>i</code>”进入编辑模式，编辑如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:&#123;</span><br><span class="line">        <span class="attr">"端口1"</span>:<span class="string">"密码1"</span>,</span><br><span class="line">        <span class="attr">"端口2"</span>:<span class="string">"密码2"</span>,</span><br><span class="line">        <span class="attr">"端口3"</span>:<span class="string">"密码3"</span>,</span><br><span class="line">        <span class="attr">"端口4"</span>:<span class="string">"密码4"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"chacha20"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3）按<code>esc</code>返回，输入<code>:wq</code>回车保存</p><p>(4）输入以下命令重启ShadowsocksR服务，使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks restart  # 重启ShadowsocksR服务</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;shadowsocksr服务端常用命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="Proxy" scheme="https://linuxops.fun/categories/Proxy/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建ShadowsocksR实现科学上网</title>
    <link href="https://linuxops.fun/2016/06/11/af735ad7.html"/>
    <id>https://linuxops.fun/2016/06/11/af735ad7.html</id>
    <published>2016-06-11T11:19:12.000Z</published>
    <updated>2019-10-30T16:46:16.335Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:58 GMT+0800 (China Standard Time) --><h2 id="创建服务器"><a class="markdownIt-Anchor" href="#创建服务器"></a> 创建服务器</h2><h3 id="注册公有云账号"><a class="markdownIt-Anchor" href="#注册公有云账号"></a> 注册公有云账号</h3><p>注册公有云账号，这里使用阿里云为例，你们可以自行百度解决，有问题可以在博文评论中提问。</p><h3 id="购买境外ecs服务器"><a class="markdownIt-Anchor" href="#购买境外ecs服务器"></a> 购买境外ECS服务器</h3><p>这里使用阿里云香港ECS实例为例，登录到阿里云控制台，找到云服务器 ECS ，然后点击 <code>创建实例</code> 按钮，地域选择中国香港，实例类型按照自己的预算购买，这里选择最便宜的实例类型 ecs.t5-lc1m1.small；镜像使用Centos7 64位，必须是64位的，可以是其他的系统镜像，但必须是64位的；带宽按照自己的预算购买，这里选择1M带宽；如下图所示：</p><img src="/2016/06/11/af735ad7/1571022182939.png"><h2 id="搭建shadowsocksr服务"><a class="markdownIt-Anchor" href="#搭建shadowsocksr服务"></a> 搭建ShadowsocksR服务</h2><h3 id="安装配置ssr服务"><a class="markdownIt-Anchor" href="#安装配置ssr服务"></a> 安装配置SSR服务</h3><p>创建好阿里云实例，在阿里云控制台获取实例的公网地址，使用远程工具secureCRT连接服务器，开始搭建hadowsocksR服务（简称SSR服务）。执行以下命令，下载安装SSR服务的脚本，赋予脚本执行权限，然后运行脚本，开始安装SSR服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod +x shadowsocksR.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span></span><br></pre></td></tr></table></figure><blockquote><p>注：如果这里的shadowsocksR.sh脚本wget链接地址https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh失效，可以使用博文尾部的附件链接地址替代</p></blockquote><p>运行后，会提示你设置密码（password）和端口（port），加密方式，协议，混淆。</p><p></p><p>(1) 提示<code>Please enter password for ShadowsocksR:</code>设置SSR连接密码：自己设定（如不设定，默认为 <a href="http://teddysun.com" target="_blank" rel="noopener">teddysun.com</a>）</p><img src="/2016/06/11/af735ad7/20181231160302.png"><p></p><p>(2) 提示<code>Please enter a port for ShadowsocksR [1-65535]设置</code>你的服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）</p><img src="/2016/06/11/af735ad7/20181231160423.png"><p></p><p>(3) 提示<code>Please select stream cipher for ShadowsocksR:</code>设置加密方式,输入序号回车选择：自己设定(建议<code>chacha20</code>)（如不设定，Python 和 libev 版默认为 <code>aes-256-gcm</code>，R 和 Go 版默认为 <code>aes-256-cfb</code>）</p><img src="/2016/06/11/af735ad7/20181231155203.png"><p></p><p>(4) 提示<code>Please select protocol for ShadowsocksR:</code>输入序号回车选择协议（protocol）：自己设定（如不设定，默认为 origin）</p><img src="/2016/06/11/af735ad7/20181231155214.png"><p></p><p>(5) 提示 <code>Please select obfs for ShadowsocksR:</code>输入序号回车选择混淆方式obfs,(免流请选择2:http_simple)（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</p><img src="/2016/06/11/af735ad7/20181231155226.png"><p></p><p>(6) 设置好以上内容后，看到如下图所示提示，按任意键开始安装SSR服务，按Ctrl + c 返回终止运行脚本，此时我们继续按回车键运行脚本安装SSR服务</p><img src="/2016/06/11/af735ad7/1571023658227.png"><p></p><p>(7) 脚本开始自己运行，大概几分钟后运行结束，这时会出现红色字体的配置信息，该配置信息就是你前面设置的SSR服务连接的配置内容，请务必牢记，最好截图保存，以免遗忘</p><img src="/2016/06/11/af735ad7/0181231162021.png"><blockquote><p>备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p></blockquote><p>本脚本安装完成后SSR服务即已实现后台启动，且开机自动启动。</p><h3 id="停止防火墙允许ssr服务通信"><a class="markdownIt-Anchor" href="#停止防火墙允许ssr服务通信"></a> 停止防火墙允许SSR服务通信</h3><p>停止防火墙请执行以下命令[回车]：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>查看防火墙状态请执行以下命令[回车] ：返回 <code>not running</code> 表示已关闭:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><h3 id="配置阿里云实例安全组"><a class="markdownIt-Anchor" href="#配置阿里云实例安全组"></a> 配置阿里云实例安全组</h3><p>登录阿里云控制台，进入云服务器 ECS，找到你创建的实例，设置实例的安全组，配置安全组允许你前面配置的SSR服务端口通信，如下图所示，可以参考<a href="https://www.alibabacloud.com/help/zh/doc-detail/65408.htm" target="_blank" rel="noopener">阿里云官方文档配置实例安全组</a>，有问题可以在博文评论区评论。</p><img src="/2016/06/11/af735ad7/1571024793039.png"><p></p><p>至此，SSR服务端搭建完成，ShadowsocksR客户端可以通过配置SSR服务端代理进行访问国外网站了。</p><p></p><h3 id="ssr服务端常用命令"><a class="markdownIt-Anchor" href="#ssr服务端常用命令"></a> SSR服务端常用命令</h3><p>**卸载方法：**使用 root 用户登录，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./shadowsocksR.sh uninstall</span><br></pre></td></tr></table></figure><p>**查看进程是否启动：**运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure><p><strong>其他命令：</strong></p><blockquote><p>启动：<code>/etc/init.d/shadowsocks start</code><br>停止：<code>/etc/init.d/shadowsocks stop</code><br>重启：<code>/etc/init.d/shadowsocks restart</code><br>状态：<code>/etc/init.d/shadowsocks status</code><br>配置文件路径：<code>/etc/shadowsocks.json</code><br>日志文件路径：<code>/var/log/shadowsocks.log</code><br>代码安装目录：<code>/usr/local/shadowsocks</code></p></blockquote><h2 id="shadowsocksr客户端科学上网"><a class="markdownIt-Anchor" href="#shadowsocksr客户端科学上网"></a> ShadowsocksR客户端科学上网</h2><p>下面以Windows平台为例安装ShadowsocksR客户端，并配置SSR服务端代理信息进行科学上网。</p><h3 id="下载安装shadowsocksr客户端"><a class="markdownIt-Anchor" href="#下载安装shadowsocksr客户端"></a> 下载安装ShadowsocksR客户端</h3><p>下载好ShadowsocksR-win-4.9.2.zip安装包，将安装包解压到指定的路径下，双击打开ShadowsocksR-dotnet4.0.exe程序，如下图所示，然后添加SSR服务器的服务端配置信息，添加完成后确定保存。</p><img src="/2016/06/11/af735ad7/1571027305256.png"><p>下面开始测试上网，打开google浏览器，输入以下网址测试：<a href="http://www.youtube.com" target="_blank" rel="noopener">www.youtube.com</a></p><img src="/2016/06/11/af735ad7/1571033981369.png"><p>返回如上图所示界面，可以正常打开网址，表示已经实现科学上网。</p><h3 id="各平台shadowsocksr客户端地址"><a class="markdownIt-Anchor" href="#各平台shadowsocksr客户端地址"></a> 各平台ShadowsocksR客户端地址</h3><p><strong>Windows：</strong><br><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p><p><strong>MacOS：</strong><br><a href="https://github.com/wzdnzd/ShadowsocksX-NG-R/releases" target="_blank" rel="noopener">https://github.com/wzdnzd/ShadowsocksX-NG-R/releases</a></p><p><strong>Linux内核：</strong><br>Debian、Ubantu、CentOS等电脑桌面发行版（不能完全通用，可以尝试一下）</p><p><a href="https://github.com/shadowsocksrr/electron-ssr/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/electron-ssr/releases</a></p><p><strong>Android：</strong><br><a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-android/releases</a></p><p><strong>IOS：</strong><br>需要国外账号，推荐shadowrocket（小火箭），potatso（土豆丝）</p><h2 id="附件"><a class="markdownIt-Anchor" href="#附件"></a> 附件：</h2><p>shadowsocksR安装脚本下载地址：</p><p><a href="https://raw.githubusercontent.com/Eddieeo/software-package/master/shadowsocksR.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/Eddieeo/software-package/master/shadowsocksR.sh</a></p><p>Windows ShadowsocksR客户端下载地址：</p><p><a href="https://github.com/Eddieeo/software-package/raw/master/ShadowsocksR-win-4.9.2.zip" target="_blank" rel="noopener">https://github.com/Eddieeo/software-package/raw/master/ShadowsocksR-win-4.9.2.zip</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;创建服务器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#创建服务器&quot;&gt;&lt;/a&gt; 创建
      
    
    </summary>
    
    
      <category term="Proxy" scheme="https://linuxops.fun/categories/Proxy/"/>
    
    
  </entry>
  
  <entry>
    <title>多台电脑维护Hexo博客</title>
    <link href="https://linuxops.fun/2015/09/09/be6d83ca.html"/>
    <id>https://linuxops.fun/2015/09/09/be6d83ca.html</id>
    <published>2015-09-09T14:30:15.000Z</published>
    <updated>2019-10-30T16:46:16.335Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:58 GMT+0800 (China Standard Time) --><p>写博客，不一定是在同一部电脑上写，有可能需要在不同的电脑上进行写博客，所以当有多台电脑进行维护博客源码时，就需要用到远程仓库了，以下分别用远程仓库的两种方法实现Hexo博客源码的备份和维护。</p><h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">System Environment:</span><br><span class="line">System version: CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">Git version: 1.8.3.1</span><br><span class="line">Nvm version: 0.34.0</span><br><span class="line">Nodejs version: v12.10.0</span><br><span class="line">Npm version: 6.10.3</span><br><span class="line">Hexo version: </span><br><span class="line">    hexo: 3.9.0</span><br><span class="line">    hexo-cli: 2.0.0</span><br><span class="line">    os: Linux 3.10.0-957.el7.x86_64 linux x64</span><br><span class="line">    node: 12.10.0</span><br><span class="line">    v8: 7.6.303.29-node.16</span><br><span class="line">    uv: 1.31.0</span><br><span class="line">    zlib: 1.2.11</span><br><span class="line">    brotli: 1.0.7</span><br><span class="line">    ares: 1.15.0</span><br><span class="line">    modules: 72</span><br><span class="line">    nghttp2: 1.39.2</span><br><span class="line">    napi: 4</span><br><span class="line">    llhttp: 1.1.4</span><br><span class="line">    http_parser: 2.8.0</span><br><span class="line">    openssl: 1.1.1c</span><br><span class="line">    cldr: 35.1</span><br><span class="line">    icu: 64.2</span><br><span class="line">    tz: 2019a</span><br><span class="line">    unicode: 12.1</span><br></pre></td></tr></table></figure><h3 id="安装git-node-和-hexo"><a class="markdownIt-Anchor" href="#安装git-node-和-hexo"></a> 安装Git, node 和 hexo</h3><h4 id="安装-git"><a class="markdownIt-Anchor" href="#安装-git"></a> 安装 git:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y git</span><br></pre></td></tr></table></figure><h4 id="安装-nodejs"><a class="markdownIt-Anchor" href="#安装-nodejs"></a> 安装 nodejs:</h4><p>安装 Node.js 的最佳方式是使用 nvm。nvm 的开发者提供了一个自动安装 nvm 的简单脚本。</p><p>curl:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh</span><br></pre></td></tr></table></figure><p>wget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh</span><br></pre></td></tr></table></figure><p>安装nvm完成后，重新登录终端(退出重新登录命令行终端)并执行下列命令即可安装 Node.js。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install node</span><br></pre></td></tr></table></figure><h4 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="多人维护hexo博客源代码"><a class="markdownIt-Anchor" href="#多人维护hexo博客源代码"></a> 多人维护Hexo博客源代码</h2><p>当有多人维护Hexo博客源码时，就需要使用远程仓库进行维护管理博客源码了，以下分别介绍两种多人维护Hexo博客源码的方式。</p><h3 id="方法一新建远程代码仓库备份hexo博客源码"><a class="markdownIt-Anchor" href="#方法一新建远程代码仓库备份hexo博客源码"></a> 方法一：新建远程代码仓库备份Hexo博客源码</h3><p>在Coding或者Github上新建一个仓库，专门用于存放Hexo博客站点的源码，新建仓库可参考前面的 <code>Hexo搭建个人博客系统</code> 这篇博文。</p><h4 id="备份hexo博客源代码到新建的远程仓库master"><a class="markdownIt-Anchor" href="#备份hexo博客源代码到新建的远程仓库master"></a> 备份Hexo博客源代码到新建的远程仓库master</h4><p>在Hexo站点目录blog下执行以下命令，完成本地Hexo博客源码同步到远程仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># git init  # 初始化本地项目加入git管理</span><br><span class="line"># git remote add origin &lt;远程仓库地址&gt;  # 使用git关联本地项目和远端仓库 </span><br><span class="line"># git add -A  # 将所有文件添加给git暂存区，包括删除的文件</span><br><span class="line"># git commit -m &quot;备注信息&quot;  # 将git缓存区的所有文件提交到本地git仓库</span><br><span class="line"># git push origin master  # 推送本地git仓库到远程仓库主分支master</span><br></pre></td></tr></table></figure><p>此时，已完成Hexo博客源代码的备份，其他人可以通过拉取博客源码进行维护了。</p><h4 id="在另一台电脑编写hexo博文备份操作"><a class="markdownIt-Anchor" href="#在另一台电脑编写hexo博文备份操作"></a> 在另一台电脑编写Hexo博文备份操作</h4><p>首先使用 ssh 或 https 链接地址下载博客源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh: </span><br><span class="line"># git clone git@e.coding.net:xxx/xxx.git &lt;本地文件夹名&gt;</span><br><span class="line">  </span><br><span class="line">https: </span><br><span class="line"># git clone https://e.coding.net/xxx/xxx.git &lt;本地文件夹名&gt;</span><br></pre></td></tr></table></figure><p><code>cd</code>切换到Hexo站点目录下，安装Hexo依赖插件模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd blogcode</span><br><span class="line"># npm install  # 通过当前目录下的package.json文件安装依赖包</span><br><span class="line"># npm install hexo-deployer-git   # 安装git部署插件</span><br></pre></td></tr></table></figure><p>然后执行以下指令，前台启动Hexo服务预览博客。如果想要pm2管理Hexo后台开机自启动，可以参考前面的 <code>Hexo搭建个人博客系统</code> 这篇博文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo s  # 前台启动Hexo服务预览博客</span><br></pre></td></tr></table></figure><p>完成以上操作后，就可以继续编写博客了，可以使用 <code>hexo new &lt;title&gt;</code> 指令编写Markdown文档；也可以使用<code>Markdown文档编辑器</code>编写文档，然后将编写好的Markdown文档上传到Hexo站点目录的 source/_post 目录下，重启Hexo服务，在浏览器输入以下地址进行预览：<code>http://IPADDRESS:4000</code>，博客又完整回来了。</p><blockquote><p>注：IPADDRESS，请使用ifconfig命令在服务器上查看</p></blockquote><p>每次编写好博文发布到Coding或者Github Pages之后，都要进行Hexo博客源码的备份，继续执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># git status  # 查看本地git仓库工作目录和暂存区的状态</span><br><span class="line"># git add -A  # 将所有文件添加给git暂存区，包括删除的文件</span><br><span class="line"># git commit -m &quot;备注信息&quot;  # 将git缓存区的所有文件提交到本地git仓库</span><br><span class="line"># git push origin master  # 推送本地git仓库到远程仓库主分支master</span><br></pre></td></tr></table></figure><p>后面继续写博文的时候，需要先执行以下命令，拉取远程仓库的Hexo博客源码合并，然后才可以继续编写博文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git pull origin master[:master]  # 拉取远程origin主机的master分支，与本地的master分支合并，中括号部分可以省略不写</span><br></pre></td></tr></table></figure><h3 id="方法二使用发布静态页的远程仓库新分支备份hexo博客源码"><a class="markdownIt-Anchor" href="#方法二使用发布静态页的远程仓库新分支备份hexo博客源码"></a> 方法二：使用发布静态页的远程仓库新分支备份Hexo博客源码</h3><p>在部署好的Hexo站点目录下的 _config.yml 中，修改网站deploy的配置内容为如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@git.coding.net:xxx/xxx.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="生成静态页并部署到远程coding或者github-pages仓库"><a class="markdownIt-Anchor" href="#生成静态页并部署到远程coding或者github-pages仓库"></a> 生成静态页并部署到远程Coding或者Github Pages仓库</h4><p>修改好所有博客设置，文章写好之后，使用以下命令生成静态页面并发布到远程仓库。</p><blockquote><p>注意：如果是发布到Coding需要开启 <code>coding的持续部署静态网站</code>功能 ，稍等片刻就能看到生成的博客访问地址了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># hexo g  # 生成静态页</span><br><span class="line"># hexo d  # 发布到远程仓库</span><br></pre></td></tr></table></figure><h4 id="备份hexo博客源代码到远程静态页仓库的coding-pages分支"><a class="markdownIt-Anchor" href="#备份hexo博客源代码到远程静态页仓库的coding-pages分支"></a> 备份Hexo博客源代码到远程静态页仓库的Coding-pages分支</h4><p>在Hexo站点目录blog下执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># git init  # 初始化本地项目加入git管理</span><br><span class="line"># git remote add origin &lt;远程仓库地址&gt;  # 使用git关联本地项目和远端仓库 </span><br><span class="line"># git checkout -b coding-pages  # 创建并切换到分支coding-pages</span><br><span class="line"># git add -A  # 将所有文件添加给git暂存区，包括删除的文件</span><br><span class="line"># git commit -m &quot;提交&quot;  # 将git缓存区的所有文件提交到本地git仓库</span><br><span class="line"># git push origin coding-pages  # 推送本地git仓库到远程仓库分支coding-pages</span><br></pre></td></tr></table></figure><p>此时，已成功备份到静态页远程仓库的 <code>coding-pages</code> 分支</p><h4 id="在另一台电脑编写hexo博文备份操作-2"><a class="markdownIt-Anchor" href="#在另一台电脑编写hexo博文备份操作-2"></a> 在另一台电脑编写Hexo博文备份操作</h4><p>首先使用 ssh 或 https 链接地址下载博客源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git clone &lt;静态页远程仓库地址&gt; &lt;本地文件夹名&gt;</span><br></pre></td></tr></table></figure><p>克隆远程仓库后，当前默认为远程仓库的 <code>master</code> 分支，也就是 <code>hexo g</code> 编译后发布到远程仓库的静态页文件。</p><p>执行以下命令切换到静态页远程仓库的 <code>coding-pages</code> 分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git branch -a  # 查看本地和远程分支</span><br><span class="line"># git checkout coding-pages  # 切换到coding-pasges分支</span><br></pre></td></tr></table></figure><p><code>cd</code>切换到Hexo站点目录下，安装Hexo依赖插件模块，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># npm install -g hexo-cli    # 安装hexo</span><br><span class="line"># npm install                # 安装依赖包</span><br><span class="line"># npm install hexo-deployer-git   # 安装git部署插件</span><br><span class="line">（记得，不需要hexo init这条指令）</span><br></pre></td></tr></table></figure><p>然后执行以下指令，前台启动Hexo服务预览博客。如果想要pm2管理Hexo后台开机自启动，可以参考前面的 <code>Hexo搭建个人博客系统</code> 这篇博文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo s  # 前台启动Hexo服务预览博客</span><br></pre></td></tr></table></figure><p>在浏览器中输入网址：<code>http://IPADDRESS:4000</code>，博客又完整回来了。</p><blockquote><p>注：IPADDRESS，请使用ifconfig命令在服务器上查看</p></blockquote><p>每次编写好博文发布到Coding或者Github Pages之后，都要进行Hexo博客源码的备份，执行以下命令完成备份：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># git checkout coding-pages  # 切换到分支coding-pages</span><br><span class="line"># git add -A  # 将所有文件添加给git暂存区，包括删除的文件</span><br><span class="line"># git commit -m &quot;提交&quot;  # 将git缓存区的所有文件提交到本地git仓库</span><br><span class="line"># git push origin coding-pages  # 推送本地git仓库到远程仓库分支coding-pages</span><br></pre></td></tr></table></figure><p>后面继续写博文的时候，需要先执行以下命令，拉取静态页远程仓库coding-pages分支的Hexo博客源码合并，然后才可以继续编写博文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git pull origin coding-pages[:master]  # 拉取远程origin主机的coding-pages分支，与本地的master分支合并，中括号部分可以省略不写</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:58 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;写博客，不一定是在同一部电脑上写，有可能需要在不同的电脑上进行写博客，所以当有多台电脑进行维护博客源码时，就需要用到远程仓库
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo常见错误总结</title>
    <link href="https://linuxops.fun/2015/09/08/77ceaa9d.html"/>
    <id>https://linuxops.fun/2015/09/08/77ceaa9d.html</id>
    <published>2015-09-08T12:16:12.000Z</published>
    <updated>2019-10-30T16:46:16.312Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><p>本人在搭建Hexo博客的过程中，遇到了一些问题，通过百度，google等手段，加上自己的理解，进行了问题的复现和解决，现在总结成以下几点，希望可以帮助到一些人。</p><h2 id="hexo使用常见错误一"><a class="markdownIt-Anchor" href="#hexo使用常见错误一"></a> Hexo使用常见错误一：</h2><h3 id="问题描述template-render-error-unknown-path"><a class="markdownIt-Anchor" href="#问题描述template-render-error-unknown-path"></a> 问题描述：Template render error: (unknown path)</h3><p>Hexo站点目录下的source/_post目录中如果没有任何Markdown文档时，在使用 <code>hexo s</code> 命令启动Hexo进行前台预览时，会报以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@Hexo-Blog-Server blog]# hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Generating Baidu urls for last 100 posts</span><br><span class="line">INFO  Posts urls generated in baidu_urls.txt</span><br><span class="line"></span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path) [Line 8, Column 25]</span><br><span class="line">  Error: Unable to call `the return value of (posts[&quot;first&quot;])[&quot;updated&quot;][&quot;toISOString&quot;]`, which is undefined or falsey</span><br><span class="line">    at Object._prettifyError (/root/blog/node_modules/nunjucks/src/lib.js:36:11)</span><br><span class="line">    at /root/blog/node_modules/nunjucks/src/environment.js:567:19</span><br><span class="line">    at Template.root [as rootRenderFunc] (eval at _compile (/root/blog/node_modules/nunjucks/src/environment.js:637:18), &lt;anonymous&gt;:235:3)</span><br><span class="line">    at Template.render (/root/blog/node_modules/nunjucks/src/environment.js:556:10)</span><br><span class="line">    at Hexo.module.exports (/root/blog/node_modules/hexo-generator-feed/lib/generator.js:41:24)</span><br><span class="line">    at Hexo.tryCatcher (/root/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (/root/blog/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class="line">    at /root/blog/node_modules/hexo/lib/hexo/index.js:318:20</span><br><span class="line">    at tryCatcher (/root/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at MappingPromiseArray._promiseFulfilled (/root/blog/node_modules/bluebird/js/release/map.js:61:38)</span><br><span class="line">    at MappingPromiseArray.PromiseArray._iterate (/root/blog/node_modules/bluebird/js/release/promise_array.js:114:31)</span><br><span class="line">    at MappingPromiseArray.init (/root/blog/node_modules/bluebird/js/release/promise_array.js:78:10)</span><br><span class="line">    at MappingPromiseArray._asyncInit (/root/blog/node_modules/bluebird/js/release/map.js:30:10)</span><br><span class="line">    at _drainQueueStep (/root/blog/node_modules/bluebird/js/release/async.js:142:12)</span><br><span class="line">    at _drainQueue (/root/blog/node_modules/bluebird/js/release/async.js:131:9)</span><br><span class="line">    at Async._drainQueues (/root/blog/node_modules/bluebird/js/release/async.js:147:5)</span><br><span class="line">    at Immediate.Async.drainQueues [as _onImmediate] (/root/blog/node_modules/bluebird/js/release/async.js:17:14)</span><br><span class="line">    at processImmediate (internal/timers.js:439:21)</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法：</h3><p>查看是否安装了hexo-generator-feed插件，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Hexo-Blog-Server blog]# npm list hexo-generator-feed</span><br><span class="line">hexo-site@0.0.0 /root/blog</span><br><span class="line">└── hexo-generator-feed@2.0.0</span><br></pre></td></tr></table></figure><h4 id="方法一hexo站点目录下的source_post目录中添加文章"><a class="markdownIt-Anchor" href="#方法一hexo站点目录下的source_post目录中添加文章"></a> 方法一：Hexo站点目录下的source/_post目录中添加文章</h4><p>Hexo站点目录下的source/_post目录中不能一片文章都没有，可以使用 <code>hexo new &lt;title&gt;</code> 命令创建新文章，也可以使用Markdown编辑器编写好文章之后上传到source/_post目录中，这样再执行 <code>hexo s</code> 命令启动Hexo进行前台预览时，就不会报错了。</p><h4 id="方法二卸载-hexo-generator-feed-插件"><a class="markdownIt-Anchor" href="#方法二卸载-hexo-generator-feed-插件"></a> 方法二：卸载 <code>hexo-generator-feed</code> 插件</h4><p>执行以下命令，卸载Hexo的 <code>hexo-generator-feed</code> 插件</p><blockquote><p>注：不建议使用此方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm uninstall hexo-generator-feed</span><br></pre></td></tr></table></figure><p>卸载完成后，再执行 <code>hexo s</code> 命令启动Hexo进行前台预览时，就不会报错了。</p><h2 id="hexo使用常见错误二"><a class="markdownIt-Anchor" href="#hexo使用常见错误二"></a> Hexo使用常见错误二：</h2><h3 id="问题描述cannot-read-property-count-of-undefined"><a class="markdownIt-Anchor" href="#问题描述cannot-read-property-count-of-undefined"></a> 问题描述：Cannot read property ‘count’ of undefined</h3><p>使用 <code>Hexo server</code> 启动Hexo服务进行预览的时候，报如下所示错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@Hexo-Blog-Server blog]# hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">config.translate_title==&gt; undefined</span><br><span class="line">config.url==&gt; https://linuxops.fun</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">TypeError: Cannot read property &apos;count&apos; of undefined</span><br><span class="line">    at Hexo.module.exports (/root/blog/node_modules/hexo-baidu-url-submit/lib/generator.js:4:41)</span><br><span class="line">    at Hexo.tryCatcher (/root/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (/root/blog/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class="line">    at /root/blog/node_modules/hexo/lib/hexo/index.js:318:20</span><br><span class="line">    at tryCatcher (/root/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at MappingPromiseArray._promiseFulfilled (/root/blog/node_modules/bluebird/js/release/map.js:61:38)</span><br><span class="line">    at MappingPromiseArray.PromiseArray._iterate (/root/blog/node_modules/bluebird/js/release/promise_array.js:114:31)</span><br><span class="line">    at MappingPromiseArray.init (/root/blog/node_modules/bluebird/js/release/promise_array.js:78:10)</span><br><span class="line">    at MappingPromiseArray._asyncInit (/root/blog/node_modules/bluebird/js/release/map.js:30:10)</span><br><span class="line">    at _drainQueueStep (/root/blog/node_modules/bluebird/js/release/async.js:142:12)</span><br><span class="line">    at _drainQueue (/root/blog/node_modules/bluebird/js/release/async.js:131:9)</span><br><span class="line">    at Async._drainQueues (/root/blog/node_modules/bluebird/js/release/async.js:147:5)</span><br><span class="line">    at Immediate.Async.drainQueues [as _onImmediate] (/root/blog/node_modules/bluebird/js/release/async.js:17:14)</span><br><span class="line">    at processImmediate (internal/timers.js:439:21)</span><br></pre></td></tr></table></figure><h3 id="解决方法-2"><a class="markdownIt-Anchor" href="#解决方法-2"></a> 解决方法：</h3><p>查看是否安装了hexo-baidu-url-submit插件，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Hexo-Blog-Server blog]# npm list hexo-baidu-url-submit          </span><br><span class="line">hexo-site@0.0.0 /root/blog</span><br><span class="line">└── hexo-baidu-url-submit@0.0.6</span><br></pre></td></tr></table></figure><p>如上所示，显示Hexo站点中安装了hexo-baidu-url-submit插件，可通过一下两种方法解决这个问题。</p><h4 id="方法一卸载hexo-baidu-url-submit依赖包"><a class="markdownIt-Anchor" href="#方法一卸载hexo-baidu-url-submit依赖包"></a> 方法一：卸载hexo-baidu-url-submit依赖包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm uninstall hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>然后再执行 <code>Hexo server</code> 启动Hexo服务进行预览，就不回去报错了。</p><h4 id="方法二在hexo站点配置文件_configyml中增加以下配置"><a class="markdownIt-Anchor" href="#方法二在hexo站点配置文件_configyml中增加以下配置"></a> 方法二：在Hexo站点配置文件_config.yml中增加以下配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># baidu site Collection</span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 # 提交最新的一个链接</span><br><span class="line">  host:  # 填写博客域名，在百度站长平台中注册的域名</span><br><span class="line">  token:  # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><p>然后再执行 <code>Hexo server</code> 启动Hexo服务进行预览，就不回去报错了。</p><h2 id="hexo使用常见错误三"><a class="markdownIt-Anchor" href="#hexo使用常见错误三"></a> Hexo使用常见错误三：</h2><h3 id="问题描述error-deployer-not-found-git"><a class="markdownIt-Anchor" href="#问题描述error-deployer-not-found-git"></a> 问题描述：ERROR Deployer not found: git</h3><p>使用 <code>hexo d</code> 命令将Hexo站点下 <code>.deploy_git</code> 目录下的静态页面发布到远程仓库时，报如下所示错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Hexo-Blog-Server blog]# hexo d                      </span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><h3 id="解决方法-3"><a class="markdownIt-Anchor" href="#解决方法-3"></a> <strong>解决方法</strong>：</h3><p>使用git进行发布时，需要安装0 <code>hexo-deployer-git</code> 插件。执行以下命令进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成后，在Hexo的站点配置文件_config.yml中增加以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@***.github.com:***/***.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><blockquote><p>注：Hexo 3.0 以上部署类型不再是<code>github</code>，而是 <code>git</code> 。</p></blockquote><h2 id="hexo使用常见错误四"><a class="markdownIt-Anchor" href="#hexo使用常见错误四"></a> Hexo使用常见错误四：</h2><h3 id="问题描述unhandled-rejection-typeerror-cannot-set-property-lastindex-of-undefined"><a class="markdownIt-Anchor" href="#问题描述unhandled-rejection-typeerror-cannot-set-property-lastindex-of-undefined"></a> 问题描述：Unhandled rejection TypeError: Cannot set property ‘lastIndex’ of undefined</h3><p>使用 <code>hexo d</code> 发布静态页时，报如下所示错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Unhandled rejection TypeError: Cannot set property &apos;lastIndex&apos; of undefined</span><br><span class="line">    at highlight (/Users/leesin/Desktop/blog/node_modules/highlight.js/lib/highlight.js:511:35)</span><br><span class="line">    at /Users/leesin/Desktop/blog/node_modules/highlight.js/lib/highlight.js:561:21</span><br><span class="line">    at Array.forEach (&lt;anonymous&gt;)</span><br><span class="line">    at Object.highlightAuto (/Users/leesin/Desktop/blog/node_modules/highlight.js/lib/highlight.js:560:40)</span><br><span class="line">    at /Users/leesin/Desktop/blog/node_modules/hexo-util/lib/highlight.js:117:25</span><br><span class="line">    at highlight (/Users/leesin/Desktop/blog/node_modules/hexo-util/lib/highlight.js:120:7)</span><br><span class="line">    at highlightUtil (/Users/leesin/Desktop/blog/node_modules/hexo-util/lib/highlight.js:22:14)</span><br><span class="line">    at /Users/leesin/Desktop/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:62:15</span><br><span class="line">    at String.replace (&lt;anonymous&gt;)</span><br><span class="line">    at Hexo.backtickCodeBlock (/Users/leesin/Desktop/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:14:31)</span><br><span class="line">    at Hexo.tryCatcher (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class="line">    at Promise.each.filter (/Users/leesin/Desktop/blog/node_modules/hexo/lib/extend/filter.js:63:65)</span><br><span class="line">    at tryCatcher (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Object.gotValue (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/reduce.js:155:18)</span><br><span class="line">    at Object.gotAccum (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/reduce.js:144:25)</span><br><span class="line">    at Object.tryCatcher (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/promise.js:512:31)</span><br><span class="line">    at Promise._settlePromise (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/promise.js:569:18)</span><br><span class="line">    at Promise._settlePromiseCtx (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/promise.js:606:10)</span><br><span class="line">    at _drainQueueStep (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/async.js:142:12)</span><br><span class="line">    at _drainQueue (/Users/leesin/Desktop/blog/node_modules/bluebird/js/release/async.js:131:9)</span><br></pre></td></tr></table></figure><h3 id="解决方法-4"><a class="markdownIt-Anchor" href="#解决方法-4"></a> 解决方法：</h3><p>将Hexo站点配置文件_config.yml中的 auto_detect设置为false ，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_detect: false</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;本人在搭建Hexo博客的过程中，遇到了一些问题，通过百度，google等手段，加上自己的理解，进行了问题的复现和解决，现在总
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo-nexo主题配置中的问题</title>
    <link href="https://linuxops.fun/2015/09/07/2af6010.html"/>
    <id>https://linuxops.fun/2015/09/07/2af6010.html</id>
    <published>2015-09-07T12:08:12.000Z</published>
    <updated>2019-10-30T16:46:16.335Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><p>​</p><h2 id="引子"><a class="markdownIt-Anchor" href="#引子"></a> 引子</h2><p>好久没写博客了，一时间发现作者更新了nexo主题版本，我就很自然的拉取最新版本，然后合并自己本地的博客主题源码，解决了好几个文件的冲突。看似是解决好了，不料在我 <code>hexo clean</code> ，<code>hexo g</code> 操作时，出现了问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">ERROR Script load failed: themes\next\scripts\tags\exturl.js</span><br><span class="line">Error: Cannot find module &apos;hexo-util&apos;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:325:15)</span><br><span class="line">    at Function.Module._load (module.js:276:25)</span><br><span class="line">    at Module.require (module.js:353:17)</span><br><span class="line">    at require (D:\myblog-hexo\node_modules\hexo\lib\hexo\index.js:213:21)</span><br><span class="line">    at D:\myblog-hexo\themes\next\scripts\tags\exturl.js:7:12</span><br><span class="line">    at D:\myblog-hexo\node_modules\hexo\lib\hexo\index.js:229:12</span><br><span class="line">    at tryCatcher (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\rel</span><br><span class="line">ease\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (D:\myblog-hexo\node_modules\hexo\node_</span><br><span class="line">modules\bluebird\js\release\promise.js:502:31)</span><br><span class="line">    at Promise._settlePromise (D:\myblog-hexo\node_modules\hexo\node_modules\blu</span><br><span class="line">ebird\js\release\promise.js:559:18)</span><br><span class="line">    at Promise._settlePromise0 (D:\myblog-hexo\node_modules\hexo\node_modules\bl</span><br><span class="line">uebird\js\release\promise.js:604:10)</span><br><span class="line">    at Promise._settlePromises (D:\myblog-hexo\node_modules\hexo\node_modules\bl</span><br><span class="line">uebird\js\release\promise.js:683:18)</span><br><span class="line">    at Promise._fulfill (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\</span><br><span class="line">js\release\promise.js:628:18)</span><br><span class="line">    at Promise._resolveCallback (D:\myblog-hexo\node_modules\hexo\node_modules\b</span><br><span class="line">luebird\js\release\promise.js:423:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (D:\myblog-hexo\node_modules\hexo\node_</span><br><span class="line">modules\bluebird\js\release\promise.js:514:17)</span><br><span class="line">    at Promise._settlePromise (D:\myblog-hexo\node_modules\hexo\node_modules\blu</span><br><span class="line">ebird\js\release\promise.js:559:18)</span><br><span class="line">    at Promise._settlePromise0 (D:\myblog-hexo\node_modules\hexo\node_modules\bl</span><br><span class="line">uebird\js\release\promise.js:604:10)</span><br><span class="line">    at Promise._settlePromises (D:\myblog-hexo\node_modules\hexo\node_modules\bl</span><br><span class="line">uebird\js\release\promise.js:683:18)</span><br><span class="line">    at Promise._fulfill (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\</span><br><span class="line">js\release\promise.js:628:18)</span><br><span class="line">    at D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\nodebac</span><br><span class="line">k.js:42:21</span><br><span class="line">    at D:\myblog-hexo\node_modules\hexo\node_modules\hexo-fs\node_modules\gracef</span><br><span class="line">ul-fs\graceful-fs.js:78:16</span><br><span class="line">    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)</span><br></pre></td></tr></table></figure><p>虽然这些错误不影响正常使用，不过有点强迫症的我，是不能接受的。查了一下百度，并没有发现和我相同问题的，结果厚着脸到作者源码仓库 iissnan/hexo-theme-next, 发布了一个 ISS，求解错误，得到热心的同学解答，现把自己解决方法记录下来！</p><h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2><p>首先，错误列表反复提示 <code>Error: Cannot find module 'hexo-util'</code> 这句，原来是加载 <code>hexo-util</code> 模块失败！接下来，就安装此模块，在Hexo站点目录下执行以下命令 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm install hexo-util --save  # 安装模块hexo-util</span><br></pre></td></tr></table></figure><p>返回内容显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo-util@0.6.0 postinstall D:\myblog-hexo\node_modules\hexo-util</span><br><span class="line">&gt; npm run build:highlight</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; hexo-util@0.6.0 build:highlight D:\myblog-hexo\node_modules\hexo-util</span><br><span class="line">&gt; node scripts/build_highlight_alias.js &gt; highlight_alias.json</span><br><span class="line"></span><br><span class="line">save-dev@2.0.0 node_modules\save-dev</span><br><span class="line"></span><br><span class="line">hexo-util@0.6.0 node_modules\hexo-util</span><br><span class="line">├── html-entities@1.2.0</span><br><span class="line">├── striptags@2.2.1</span><br><span class="line">├── bluebird@3.4.7</span><br><span class="line">├── highlight.js@9.9.0</span><br><span class="line">├── cross-spawn@4.0.2 (lru-cache@4.0.2, which@1.2.12)</span><br><span class="line">└── camel-case@3.0.0 (upper-case@1.1.3, no-case@2.3.1)</span><br></pre></td></tr></table></figure><p>显示为此，说明模块安装成功，再试 <code>hexo clean</code> 、<code>hexo g</code> 等操作，都正常了。<br>总体来说，一般这些错误，都是模块的问题，知道了原理，再慢慢排查，就应该能解决相应的问题！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;​&lt;/p&gt;&lt;h2 id=&quot;引子&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#引子&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo博客Markdown文章插入图片方法总结</title>
    <link href="https://linuxops.fun/2015/09/06/c7c81ce1.html"/>
    <id>https://linuxops.fun/2015/09/06/c7c81ce1.html</id>
    <published>2015-09-06T10:16:12.000Z</published>
    <updated>2019-10-30T16:46:16.312Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><p>在网上查了一下有以下几种方式往Hexo博客Markdown文章中插入图片</p><h2 id="本地引用"><a class="markdownIt-Anchor" href="#本地引用"></a> 本地引用</h2><h3 id="绝对路径"><a class="markdownIt-Anchor" href="#绝对路径"></a> 绝对路径</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。对于source/images/image.jpg这张图片可以用以下语法访问到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h3 id="相对路径"><a class="markdownIt-Anchor" href="#相对路径"></a> 相对路径</h3><p>图片除了可以放在站点统一的source/images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置博客站点目录下的_config.yml来生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>将 _config.yml 文件中的配置项 post_asset_folder 设为 true 后，执行以下命令新建Markdown文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo new post_name  # 新建Markdown文章，post_name即 是文章的标题，也是文件名.</span><br></pre></td></tr></table></figure><p>之后会在站点的 source/_posts 中会生成文章文件 post_name.md 和同名目录 post_name 。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。posts/post_name/image.jpg这张照片可以用以下方式访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p>上述markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中可以同时显示，可以使用标签插件语法。_posts/post_name/image.jpg这张照片可以用以下方式访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><p>其中，image.jpg 是图片的文件名， This is an image 是一个描述信息，可不写。</p><p>注意：用以上方式访问时，在Markdown的编辑器中无法预览效果。</p><h2 id="cdn引用"><a class="markdownIt-Anchor" href="#cdn引用"></a> CDN引用</h2><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。因国内访问github速度较慢，所以将图片放到国内图床上，然后引用外链是常用的方法。<br>常用图床总结：<a href="https://sspai.com/post/40499" target="_blank" rel="noopener">https://sspai.com/post/40499</a></p><blockquote><p>图床，也就是专门提供存储图片的地方，我们只要通过图床提供的 API 接口，把图片上传上去，就可以通过外链访问了，根本不用操心图片是怎么存的，硬盘空间不够了，硬盘坏了，访问速度比较慢等等问题，这些图床都会帮我们搞定，他们会用各种技术帮我们做图片相关的优化和服务，比如多机互备、CDN 加速、图片处理、图片鉴黄、文本识别等等。</p></blockquote><blockquote><p>当然，图床也是有缺点的，当所有人都把图片存在同一个图床上，万一有一天图床真挂了，那所有图片就都无法访问了，虽然这种情况的概率很低，但并不等于不会发生</p></blockquote><blockquote><p>目前图床可以分为两种，一种是公共图床，一种是自建图床。公共图床也就是利用公共服务的图片上传接口，来提供图片外链的服务，比如新浪微博。自建图床，也就是利用各大云服务商提供的存储空间或者自己在 VPS 上使用开源软件来搭建图床，存储图片，生成外链提供访问，比如七牛、Lychee 开源自建图床方案。</p></blockquote><ol><li>微博图床（Chrome浏览器有个“新浪微博图床”插件，可以自动生成markdown链接）简单方便</li><li>七牛：需要注册且实名认证等太麻烦，放弃</li><li>腾讯云等云存储服务，需要先将照片放到云盘，然后找到超链接，然后粘贴到文章。太麻烦，放弃。</li><li>【强烈推荐！！！】ipic 工具，具体用法请谷歌，支持监控剪贴板，一键上传到微博图床，免费版默认是微博图床，支持七牛云等</li></ol><h2 id="使用github"><a class="markdownIt-Anchor" href="#使用github"></a> 使用GitHub</h2><p>使用github存储博客图片</p><ol><li>创建一个空的repo</li><li>然后将图片push到repo中</li><li>点击图片进去，有个download，右键复制链接</li><li>将链接插入文章，如下所示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![logo](https://github.com/xxxx/xx.jpg)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在网上查了一下有以下几种方式往Hexo博客Markdown文章中插入图片&lt;/p&gt;&lt;h2 id=&quot;本地引用&quot;&gt;&lt;a class
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo常用命令总结</title>
    <link href="https://linuxops.fun/2015/09/05/ee339324.html"/>
    <id>https://linuxops.fun/2015/09/05/ee339324.html</id>
    <published>2015-09-05T11:30:12.000Z</published>
    <updated>2019-10-30T16:46:16.312Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><h3 id="hexo安装与升级"><a class="markdownIt-Anchor" href="#hexo安装与升级"></a> Hexo安装与升级</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo  # 安装Hexo  </span><br><span class="line">npm update -g hexo  # 升级Hexo</span><br></pre></td></tr></table></figure><h3 id="hexo初始化站点与新建文章"><a class="markdownIt-Anchor" href="#hexo初始化站点与新建文章"></a> Hexo初始化站点与新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init  # 初始化博客站点</span><br><span class="line">hexo new postName  # 新建Markdown文章，postName为文章文件名称</span><br><span class="line">hexo new page &quot;pageName&quot;  # 新建页面</span><br></pre></td></tr></table></figure><h3 id="hexo服务启动"><a class="markdownIt-Anchor" href="#hexo服务启动"></a> Hexo服务启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server  # 前端开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo server -s  # 静态模式</span><br><span class="line">hexo server -p 5000  # 指定端口启动</span><br><span class="line">hexo server -i 192.168.1.1  # 自定义 IP</span><br></pre></td></tr></table></figure><h3 id="hexo清除缓存"><a class="markdownIt-Anchor" href="#hexo清除缓存"></a> Hexo清除缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  # 清除缓存 网页正常情况下可以忽略此条命令</span><br></pre></td></tr></table></figure><h3 id="hexo生成静态页"><a class="markdownIt-Anchor" href="#hexo生成静态页"></a> Hexo生成静态页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  # 生成静态页面至public目录</span><br></pre></td></tr></table></figure><h3 id="hexo发布静态页到代码托管仓库"><a class="markdownIt-Anchor" href="#hexo发布静态页到代码托管仓库"></a> HEXO发布静态页到代码托管仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy  # 将.deploy目录部署到GitHub或其他代码托管仓库</span><br></pre></td></tr></table></figure><h2 id="hexo命令简写"><a class="markdownIt-Anchor" href="#hexo命令简写"></a> Hexo命令简写</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n postName == hexo new postName  # 新建文章</span><br><span class="line">hexo p == hexo publish &lt;title&gt;  # 移动草稿文章到source/_post目录</span><br><span class="line">hexo g == hexo generate  # 生成静态页</span><br><span class="line">hexo s == hexo server  # 前台启动服务预览</span><br><span class="line">hexo d == hexo deploy  # 部署到到代码托管仓库</span><br></pre></td></tr></table></figure><h3 id="hexo部署到代码托管仓库步骤"><a class="markdownIt-Anchor" href="#hexo部署到代码托管仓库步骤"></a> Hexo部署到代码托管仓库步骤</h3><p>如果deploy类型是git,则需要安装下面的模块</p><blockquote><p>$ npm install hexo-deployer-git --save</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  # 清除Hexo静态页缓存</span><br><span class="line">hexo g  # 生成静态网页</span><br><span class="line">hexo d  # 开始部署</span><br></pre></td></tr></table></figure><h3 id="监视文件变动"><a class="markdownIt-Anchor" href="#监视文件变动"></a> 监视文件变动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  # 使用Hexo生成静态文件快速而且简单</span><br><span class="line">hexo generate --watch  # 监视文件变动</span><br></pre></td></tr></table></figure><h3 id="生成静态页后部署"><a class="markdownIt-Anchor" href="#生成静态页后部署"></a> 生成静态页后部署</h3><p>两个命令的作用是相同的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><h3 id="hexo新建草稿文件"><a class="markdownIt-Anchor" href="#hexo新建草稿文件"></a> Hexo新建草稿文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="hexo编写markdown文档开头模板"><a class="markdownIt-Anchor" href="#hexo编写markdown文档开头模板"></a> Hexo编写Markdown文档开头模板</h3><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">title</td><td style="text-align:center">标题</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">文件建立日期</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Markdown文章模板 # 文章标题</span><br><span class="line">date: 2015-08-29 18:16:12 # 文章创建日期和时间</span><br><span class="line">categories: Tools # 文章分类</span><br><span class="line">tags:  # 文章标签</span><br><span class="line">toc: true # 是否启用文章内容索引 option: true</span><br><span class="line">sidebar:  # 是否启用sidebar侧边栏，默认开启侧边栏  option： none 不启用</span><br><span class="line">mathjax:  # 是否启用数学公式渲染 option: true</span><br></pre></td></tr></table></figure><h3 id="设置文章摘要"><a class="markdownIt-Anchor" href="#设置文章摘要"></a> 设置文章摘要</h3><p>以上是文章摘要 <code>&lt;!--more--&gt;</code> 以下是余下全文</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;hexo安装与升级&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hexo安装与升级&quot;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown工具介绍</title>
    <link href="https://linuxops.fun/2015/09/04/35e0eca1.html"/>
    <id>https://linuxops.fun/2015/09/04/35e0eca1.html</id>
    <published>2015-09-04T12:30:16.000Z</published>
    <updated>2019-10-30T16:46:16.323Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><h2 id="什么是-markdown"><a class="markdownIt-Anchor" href="#什么是-markdown"></a> 什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字.</p><p>很多产品的文档也是用markdown编写的，并且以“<a href="http://README.md" target="_blank" rel="noopener">README.md</a>”的文件名保存在软件的目录下面。</p><h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h2><p>标题<br>H1 :# Header 1<br>H2 :## Header 2<br>H3 :### Header 3<br>H4 :#### Header 4<br>H5 :##### Header 5<br>H6 :###### Header 6<br>链接 :<a href="http://baixin.io:8000/2016/11/markdownTool/URL" target="_blank" rel="noopener">Title</a><br>加粗 :<strong>Bold</strong><br>斜体字 :<em>Italics</em><br><em>删除线 :text 段落 : 段落之间空一行 换行符 : 一行结束时输入两个空格 列表 :</em> 添加星号成为一个新的列表项。<br>引用 :&gt; 引用内容<br>内嵌代码 : <code>alert('Hello World');</code><br>画水平线 (HR) :——–</p><p>css 的大部分语法同样可以在 markdown 上使用，但不同的渲染器渲染出来的 markdown 内容样式也不一样，下面这些链接里面有 markdown 基本语法，你也可以在下面几个平台上尝试着写一些。</p><h2 id="常见的markdown-编辑器"><a class="markdownIt-Anchor" href="#常见的markdown-编辑器"></a> 常见的Markdown 编辑器</h2><p><a href="%5Bhttps://www.typora.io%5D(https://www.typora.io/)">Typora</a> 是一款轻便简洁的Markdown编辑器,支持即时渲染技术。</p><img src="/2015/09/04/35e0eca1/1570779632937.png"><p><br><a href="http://mahua.jser.me/?utm_source=mindstore.io" target="_blank" rel="noopener">MaHua</a> 在线 Markdown 编辑器 ,无须测试。</p><img src="/2015/09/04/35e0eca1/dwfdgres578902453.png"><p><br><a href="http://mdp.tylingsoft.com/" target="_blank" rel="noopener">Markdown Plus</a> 一款 Markdown 编辑器，可以支持添加任务列表、emoji、流程图等。</p><img src="/2015/09/04/35e0eca1/efgkglloto564562.png"><p><br><a href="https://www.zybuluo.com/cmd/?utm_source=mindstore.io" target="_blank" rel="noopener">Cmd Markdown</a> 作业部落在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。</p><img src="/2015/09/04/35e0eca1/jfgkkyu45550154.png"><p><br><a href="https://github.com/MacDownApp/macdown" target="_blank" rel="noopener">Macdown</a> Github 上开源的 Mac 平台上的 Markdown 编辑器</p><img src="/2015/09/04/35e0eca1/1570777864772.png"><p><br><a href="https://www.gitbook.com" target="_blank" rel="noopener">GitBook Editor</a> 一款团队在线编辑文档工具。可以轻松书写笔记，支持团队协同编辑。同时支持 Markdown 语法，还保持了印象笔记的风格并可在线预览。</p><img src="/2015/09/04/35e0eca1/1570778923832.png"><p><br><a href="http://www.glamdevelopment.com/outlinely?utm_source=mindstore.io" target="_blank" rel="noopener">Outlinely</a> 界面简洁大方的大纲类 Mac 软件，使用起来很简单，而且支持输出 Markdown 格式。</p><img src="/2015/09/04/35e0eca1/1570778721904.png"><p><br><a href="https://github.com/geekcompany/DeerResume?utm_source=mindstore.io" target="_blank" rel="noopener">DeerResume</a> 程序员专用 MarkDown 简历制作在线工具。</p><img src="/2015/09/04/35e0eca1/1570779346982.png"><p></p><h2 id="markdown语法参考网址"><a class="markdownIt-Anchor" href="#markdown语法参考网址"></a> Markdown语法参考网址</h2><p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">Markdown菜鸟教程文档</a></p><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Markdown语法参考文档</a></p><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;什么是-markdown&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是-mar
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://linuxops.fun/categories/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>第三方评论系统介绍</title>
    <link href="https://linuxops.fun/2015/09/03/1b34862d.html"/>
    <id>https://linuxops.fun/2015/09/03/1b34862d.html</id>
    <published>2015-09-03T12:30:45.000Z</published>
    <updated>2019-10-30T16:46:16.340Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:58 GMT+0800 (China Standard Time) --><p>网站经常要用到第三方社会化评论系统，评论可以增加用户之间的互动，到底有哪些社会化评论系统可供选择？</p><p>常见的有：畅言、友言、来必力、Gitalk、Gitment等，有一些已经无法使用了。</p><h2 id="畅言"><a class="markdownIt-Anchor" href="#畅言"></a> 畅言</h2><p>目前状态：可正常使用</p><p>是否需要备案：是</p><p>是否需要注册：是</p><p>简介：大厂出品，稳定性、长久性都值得信赖。完美匹配PC端和移动端，拥有智能反垃圾系统。</p><p>网址：<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">http://changyan.kuaizhan.com/</a></p><h2 id="友言"><a class="markdownIt-Anchor" href="#友言"></a> 友言</h2><p>目前状态：可正常使用</p><p>是否需要备案：否</p><p>是否需要注册：否，如需获取个人专属评论系统需注册</p><p>简介：支持单点登录，评论导入、导出、自适应PC端和移动端。系统审核不行，垃圾评论多。</p><p>网址：<a href="http://www.uyan.cc/" target="_blank" rel="noopener">http://www.uyan.cc/</a></p><h2 id="来必力"><a class="markdownIt-Anchor" href="#来必力"></a> 来必力</h2><p>目前状态：可正常使用</p><p>是否需要备案：否</p><p>是否需要注册：是</p><p>简介：来比力(支持英语、中文、韩语)等少数几个，提供管理页面，管理网站评论内容。可手动隐藏恶性评论与灌水内容。主要应用在一些大型的新闻资讯站点上，支持社会化账号及Openid的登录，同样具有Voting功能。</p><p>网址：<a href="https://livere.com/" target="_blank" rel="noopener">https://livere.com/</a></p><h2 id="gitalk"><a class="markdownIt-Anchor" href="#gitalk"></a> Gitalk</h2><p>目前状态：可正常使用</p><p>是否需要备案：否</p><p>是否需要注册：是</p><p>简介：Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。使用 GitHub 登录，支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]，支持个人或组织，无干扰模式（设置 distractionFreeMode 为 true 开启），快捷键提交评论 （cmd|ctrl + enter）</p><p>网址：<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a></p><h2 id="gitment"><a class="markdownIt-Anchor" href="#gitment"></a> Gitment</h2><p>目前状态：可正常使用</p><p>是否需要备案：否</p><p>是否需要注册：是</p><p>简介：Gitment是基于GitHub Issues的评论系统，无需任何服务器端实现即可在前端使用。GitHub登录，Markdown / GFM支持，语法高亮，来自GitHub的通知，易于定制，没有服务器端实现。</p><p>网址：<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a></p><h2 id="disqus"><a class="markdownIt-Anchor" href="#disqus"></a> Disqus</h2><p>目前状态：可正常使用，国外（可能需要翻墙）</p><p>是否需要备案：否</p><p>是否需要注册：是</p><p>简介：可以使用在多个平台上，包括主流的Wordpress及Joomla, Dupral等等系统，很多大型网站都直接使用Disqus，也可以看出Disqus在第三评论系统里面的地位。它集成的第三方登录基本上是国外的，比如Facebook，Twitter，Google+，linkedin等。但是这种登录在国内基本都是用不了的。所以国内的博客系统或cms还是不推荐大家使用Disqus。</p><p>网址：<a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a></p><p>你还知道有哪些第三方评论系统？留言补充吧……</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:58 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;网站经常要用到第三方社会化评论系统，评论可以增加用户之间的互动，到底有哪些社会化评论系统可供选择？&lt;/p&gt;&lt;p&gt;常见的有：畅
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://linuxops.fun/categories/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo博客同时托管到Github和Coding</title>
    <link href="https://linuxops.fun/2015/09/02/a875106a.html"/>
    <id>https://linuxops.fun/2015/09/02/a875106a.html</id>
    <published>2015-09-02T13:40:12.000Z</published>
    <updated>2019-10-30T16:46:16.312Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:57 GMT+0800 (China Standard Time) --><p>​</p><p>在 Coding 和 Github 上建立 pages 项目，按要求建立。不会的可以查看前面Hexo搭建个人博客系统这篇博客。</p><h3 id="修改个hexo站点配置_configyml"><a class="markdownIt-Anchor" href="#修改个hexo站点配置_configyml"></a> 修改个Hexo站点配置_config.yml</h3><p>想要把博客同时部署到 coding 和 github 上，关键一步就是Hexo站点的<code>_config.yml</code> 配置。</p><p>根据 Hexo 官方文档需要修改成下面的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: [message]</span><br><span class="line">  repo:</span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    gitcafe: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure><p>所以我的是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    coding: git@e.coding.net:opsunion/blogsite.git,master</span><br><span class="line">    github: git@github.com:Eddieeo/eddieeo.github.io.git,master</span><br></pre></td></tr></table></figure><blockquote><p>我这边提交采用的 SSH 密钥，这个方法有个好处，提交的时候不用输入用户名和密码。如果你习惯用 http 的方式，只要将地址改成相应的 http 地址即可。</p></blockquote><h3 id="生成静态文件并发布"><a class="markdownIt-Anchor" href="#生成静态文件并发布"></a> 生成静态文件并发布</h3><p>前提：要想通过git将静态页发布到Coding和Github Pages上，必须确保Hexo站点目录下安装了<code>hexo-deployer-git</code>插件，可以在Hexo站点目录下执行以下命令安装该插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后使用generate指令生成静态文件，最后使用deploy部署命令就能把博客静态页同步到 <code>coding</code> 和 <code>github</code> 上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># hexo g  # 生成静态文件</span><br><span class="line"># hexo d  # 发布到coding和github上</span><br></pre></td></tr></table></figure><blockquote><p>以上只是把 <code>hexo</code> 生成的静态文件部署到 <code>coding</code> 和 <code>github</code> 的 <code>master</code> 分支上。稍等片刻就能用系统给的地址访问到你的博客。注意发布到Coding需要开启 <code>coding的持续部署静态网站</code>功能 ，稍等片刻就能看到生成的博客访问地址了。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:57 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;​&lt;/p&gt;&lt;p&gt;在 Coding 和 Github 上建立 pages 项目，按要求建立。不会的可以查看前面Hexo搭建个人
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客系统</title>
    <link href="https://linuxops.fun/2015/09/01/9af43afc.html"/>
    <id>https://linuxops.fun/2015/09/01/9af43afc.html</id>
    <published>2015-09-01T12:40:12.000Z</published>
    <updated>2019-10-30T16:46:16.312Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><h2 id="什么是-hexo"><a class="markdownIt-Anchor" href="#什么是-hexo"></a> 什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="系统环境"><a class="markdownIt-Anchor" href="#系统环境"></a> 系统环境</h2><blockquote><p>Distributor ID: CentOS<br>Description: CentOS Linux release 7.6.1810 (Core)<br>Release: 7.6.1810<br>CPU: 2 Core<br>内存容量: 2G<br>Git Version: 1.8.3.1<br>Nvm Version: 0.34.0<br>Node.js Version: v12.10.0<br>Npm Version: 6.11.3<br>Hexo Version: 3.9.0<br>Hexo-cli Version: 2.0.0</p></blockquote><h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2><h3 id="安装git"><a class="markdownIt-Anchor" href="#安装git"></a> 安装Git</h3><p>Linux (CentOS):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo yum -y install git-core</span><br></pre></td></tr></table></figure><h3 id="安装-nodejs"><a class="markdownIt-Anchor" href="#安装-nodejs"></a> 安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a>。nvm 的开发者提供了一个自动安装 nvm 的简单脚本：</p><h4 id="安装nvm"><a class="markdownIt-Anchor" href="#安装nvm"></a> 安装nvm</h4><p>Curl:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh</span><br></pre></td></tr></table></figure><p>或Wget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh</span><br></pre></td></tr></table></figure><h4 id="使用nvm安装node"><a class="markdownIt-Anchor" href="#使用nvm安装node"></a> 使用nvm安装node</h4><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># nvm install node</span><br></pre></td></tr></table></figure><h2 id="搭建hexo博客系统"><a class="markdownIt-Anchor" href="#搭建hexo博客系统"></a> 搭建Hexo博客系统</h2><h3 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h3><p><code>Node</code> 和 <code>Git</code> 都安装好后，可执行如下命令安装 <code>Hexo</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化blog目录"><a class="markdownIt-Anchor" href="#初始化blog目录"></a> 初始化Blog目录</h3><p>然后，执行 init 命令初始化 Hexo 到你指定的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># hexo init &lt;folder&gt;</span><br><span class="line">此处我们在用户家目录下的blog目录进行初始化</span><br><span class="line"># hexo init blog</span><br></pre></td></tr></table></figure><blockquote><p>也可以 cd 到目标目录，执行 <code>hexo init</code>。</p></blockquote><h3 id="安装hexo依赖包"><a class="markdownIt-Anchor" href="#安装hexo依赖包"></a> 安装Hexo依赖包</h3><p>初始化完成后，cd进入该初始化的目录blog下，使用npm安装Hexo对应的依赖包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd blog</span><br><span class="line"># npm install</span><br></pre></td></tr></table></figure><p>好啦，至此，全部安装工作已经完成！</p><h3 id="更换hexo主题"><a class="markdownIt-Anchor" href="#更换hexo主题"></a> 更换Hexo主题</h3><p>本文以 hexo-theme-pure 主题为例，安装主题的方法就是一句 git 命令：</p><blockquote><p>在终端命令行窗口下，切换到 Hexo 站点目录blog目录下。使用 Git checkout 代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd blog/theme</span><br><span class="line"># git clone https://github.com/Eddieeo/hexo-theme-pure.git themes/hexo-theme-pure</span><br></pre></td></tr></table></figure><p>安装完成后，打开Hexo站点目录blog的配置文件_config.yml，修改主题为 hexo-theme-pure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: hexo-theme-pure</span><br></pre></td></tr></table></figure><p>打开 blog/themes/hexo-theme-pure 目录，编辑主题配置文件_config.yml，修改自己想要的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># menu</span><br><span class="line">menu:</span><br><span class="line">  Home: .</span><br><span class="line">  Archives: archives  # 归档</span><br><span class="line">  Categories: categories  # 分类</span><br><span class="line">  Tags: tags  # 标签</span><br><span class="line">  Repository: repository  # github repositories</span><br><span class="line">  Books: books  # 豆瓣书单</span><br><span class="line">  Links: links  # 友链</span><br><span class="line">  About: about  # 关于</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true  # 是否启用导航菜单图标</span><br><span class="line">  home: icon-home-fill</span><br><span class="line">  archives: icon-archives-fill</span><br><span class="line">  categories: icon-folder</span><br><span class="line">  tags: icon-tags</span><br><span class="line">  repository: icon-project</span><br><span class="line">  books: icon-book-fill</span><br><span class="line">  links: icon-friendship</span><br><span class="line">  about: icon-cup-fill</span><br><span class="line"></span><br><span class="line"># rss</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><p>主题其它使用配置及常见问题点此：<a href="https://github.com/Eddieeo/hexo-theme-pure" target="_blank" rel="noopener">主题hexo-theme-pure使用文档</a></p><h3 id="更新主题"><a class="markdownIt-Anchor" href="#更新主题"></a> 更新主题</h3><p>切换到Hexo站点blog的主题hexo-theme-pure目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog/themes/hexo-theme-pure</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="写文章"><a class="markdownIt-Anchor" href="#写文章"></a> 写文章</h3><h4 id="使用系统默认编辑器vim编写markdown文档"><a class="markdownIt-Anchor" href="#使用系统默认编辑器vim编写markdown文档"></a> 使用系统默认编辑器vim编写Markdown文档</h4><p>执行 new 命令，生成指定名称的文章至 <code>blog/source/_posts/postName.md</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &quot;postName&quot; # 新建文章</span><br></pre></td></tr></table></figure><p>其中 <code>layout</code> 是可选参数，默认值为 <code>post</code>。有哪些 <code>layout</code> 呢，请到 <code>scaffolds</code> 目录下查看，这些文件名称就是 <code>layout</code> 名称。当然你可以添加自己的 <code>layout</code>，方法就是添加一个文件即可，同时你也可以编辑现有的 <code>layout</code>，比如 <code>post</code> 的 <code>layout</code> 默认是 <code>blog/scaffolds/post.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123; &#123; title &#125; &#125;</span><br><span class="line">date: &#123; &#123; date &#125; &#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。</p></blockquote><p>我想添加 <code>categories</code>，以免每次手工输入，只需要修改这个文件添加一行，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123; &#123; title &#125; &#125;</span><br><span class="line">date: &#123; &#123; date &#125; &#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>postName</code> 是 md 文件的名字，同时也出现在你文章的 URL 中，<code>postName</code> 如果包含空格，必须用 ’ ’ 将其包围，<code>postName</code> 可以为中文。</p><blockquote><p>注意：所有文件，开头要遵循YAML文件格式，即冒号: 后面都必须有个空格，不然会报错。</p></blockquote><p>看一下刚才生成的文件 <code>hexo/source/_posts/postName.md</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: #文章分类目录，可以为空，注意:后面有个空格</span><br><span class="line">tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</span><br><span class="line">---</span><br><span class="line">这里开始使用Markdown格式输入你的正文。</span><br></pre></td></tr></table></figure><h4 id="使用windows上的图形编辑器typora编写markdown文档"><a class="markdownIt-Anchor" href="#使用windows上的图形编辑器typora编写markdown文档"></a> 使用Windows上的图形编辑器Typora编写Markdown文档</h4><p>在Windows上安装软件Typora，开始编写Markdown文档，注意Markdown文档的开头必须有以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: #文章分类目录，可以为空，注意:后面有个空格</span><br><span class="line">tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</span><br><span class="line">---</span><br><span class="line">这里开始使用Markdown格式输入你的正文。</span><br></pre></td></tr></table></figure><p>将编写好的文档上传到Hexo服务器上的站点blog目录下的source/_post目录下，然后重启Hexo服务即可。</p><p>关于Markdown 语法说明可以参考该链接：<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">Markdown语法说明文档</a>。</p><blockquote><p>Hexo 中所有文件的编码格式均是 UTF-8。</p></blockquote><h3 id="本地前台启动hexo"><a class="markdownIt-Anchor" href="#本地前台启动hexo"></a> 本地前台启动Hexo</h3><p>执行如下命令，启动本地服务，进行文章预览调试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo server    # 简写命令 hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器测试访问前，先禁用系统自带的防火墙firewalld和SELinux服务，执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># systemctl stop firewalld.service</span><br><span class="line"># systemctl disable firewalld.service</span><br><span class="line"># setenforce 0</span><br><span class="line"># sed -i &apos;s#SELINUX=enforcing#SELINUX=disabled#g&apos; /etc/selinux/config</span><br></pre></td></tr></table></figure><p>浏览器输入 <code>http://IPADDRESS:4000</code> 就可以看到效果，如下图所示：</p><blockquote><p>注：IPADDRESS，请使用ifconfig命令在服务器上查看</p></blockquote><img src="/2015/09/01/9af43afc/1570628894488.png"><h3 id="pm2工具管理hexo开机自启且后台运行"><a class="markdownIt-Anchor" href="#pm2工具管理hexo开机自启且后台运行"></a> PM2工具管理Hexo开机自启且后台运行</h3><h4 id="安装pm2管理hexo后台运行"><a class="markdownIt-Anchor" href="#安装pm2管理hexo后台运行"></a> 安装PM2管理Hexo后台运行</h4><p>使用npm包管理器安装pm2工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm install -g pm2</span><br></pre></td></tr></table></figure><p>在Hexo的初始化目录blog目录下，添加一个名叫 hexo_run.js 的脚本，脚本内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//this is a json script,be used for run hexo backstage</span><br><span class="line">//run</span><br><span class="line">const &#123; exec &#125; = require(&apos;child_process&apos;)</span><br><span class="line">exec(&apos;hexo server&apos;,(error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        if(error)&#123;</span><br><span class="line">                console.log(&apos;exec error: $&#123;error&#125;&apos;)</span><br><span class="line">                return</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&apos;stdout: $&#123;stdout&#125;&apos;);</span><br><span class="line">        console.log(&apos;stderr: $&#123;stderr&#125;&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用以下命令可以使hexo在后台运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># pm2 start hexo_run.js      # 启动Hexo</span><br><span class="line"># pm2 stop hexo_run.js       # 停止Hexo</span><br><span class="line"># pm2 restart hexo_run.js    # 重启Hexo</span><br></pre></td></tr></table></figure><h4 id="pm2设置开机自启动"><a class="markdownIt-Anchor" href="#pm2设置开机自启动"></a> PM2设置开机自启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># pm2 save     # 保存当前pm2进程状态</span><br><span class="line"># pm2 startup  # 生成开机自启动命令</span><br><span class="line"># systemctl start pm2-root.service    # 启动pm2-root.service服务</span><br><span class="line"># systemctl enable pm2-root.service   # 设置pm2-root.service开机自启</span><br></pre></td></tr></table></figure><h2 id="部署静态页面到github-pages-或-coding-pages"><a class="markdownIt-Anchor" href="#部署静态页面到github-pages-或-coding-pages"></a> 部署静态页面到Github Pages 或 Coding Pages</h2><h3 id="注册申请github用户或coding用户"><a class="markdownIt-Anchor" href="#注册申请github用户或coding用户"></a> 注册申请GitHub用户或Coding用户</h3><blockquote><p>GitHub用户和Coding用的注册，此处不做介绍，自行百度解决。</p></blockquote><h3 id="配置ssh连接github或coding"><a class="markdownIt-Anchor" href="#配置ssh连接github或coding"></a> 配置SSH连接Github或Coding</h3><h4 id="添加-ssh-key"><a class="markdownIt-Anchor" href="#添加-ssh-key"></a> 添加 SSH-Key</h4><p>首先设置你的用户名和邮箱地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git config --global user.name &quot;username&quot;</span><br><span class="line"># git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h4 id="生成密钥"><a class="markdownIt-Anchor" href="#生成密钥"></a> 生成密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh-keygen -t rsa -C &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>想简单，过程一路回车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;    你的email帐户</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Documents and Settings/Administrator/.ssh/id_rsa): （设置保存公钥和私钥的位置，保持默认，可以不填直接回车）</span><br><span class="line">Enter passphrase (empty for no passphrase): （读取id_rsa的密码，可不填，不过建议填写）</span><br><span class="line">Enter same passphrase again: （再次输入id_rsa密码确认）</span><br><span class="line">Your identification has been saved in /c/Documents and Settings/Administrator/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Documents and Settings/Administrator/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:生成的KEY 你的email帐户</span><br></pre></td></tr></table></figure><p>上述命令若执行成功，会在 <code>/root/.ssh/</code> 目录下生成两个文件 <code>id_rsa</code> 和 <code>id_rsa.pub</code>。</p><h4 id="添加ssh密钥到github"><a class="markdownIt-Anchor" href="#添加ssh密钥到github"></a> 添加ssh密钥到Github</h4><p>在命令行用cat命令读取 <code>id_rsa.pub</code> 文件，拷贝其中的内容，登录Github，找到settings—&gt;SSH and GPG keys—&gt;New SSH key，将公钥粘贴到弹出的Key对话框中，并输入Title；然后单击Add SSH key ，完成SSH密钥添加，如下图所示。</p><img src="/2015/09/01/9af43afc/1570636306802.png"> <img src="/2015/09/01/9af43afc/1570636996625.png"><p>最后，在Hexo服务器命令行界面可以验证一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>顺利的话可以看到下面的信息，第一次使用SSH连接Github，会提示你确认连接，输入yes即可。</p><blockquote><p>The authenticity of host ‘<a href="http://github.com" target="_blank" rel="noopener">github.com</a> (52.74.223.119)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>RSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘<a href="http://github.com" target="_blank" rel="noopener">github.com</a>,52.74.223.119’ (RSA) to the list of known hosts.<br>Hi Eddieeo! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><h4 id="添加ssh密钥到coding"><a class="markdownIt-Anchor" href="#添加ssh密钥到coding"></a> 添加ssh密钥到Coding</h4><p>在命令行用cat命令读取 <code>id_rsa.pub</code> 文件，拷贝其中的内容，登录Coding，找到个人设置—&gt;SSH公钥—&gt;新增公钥，将公钥粘贴到弹出的公钥内容对话框中，并输入公钥名称，修改公钥有效期；然后单击添加 ，完成SSH密钥添加，如下图所示。</p><img src="/2015/09/01/9af43afc/1570636477934.png"> <img src="/2015/09/01/9af43afc/1570636843409.png"><p>最后，在Hexo服务器命令行界面可以验证一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -T git@e.coding.net</span><br></pre></td></tr></table></figure><p>顺利的话可以看到下面的信息，第一次使用SSH连接Coding，会提示你确认连接，输入yes即可。</p><blockquote><p>The authenticity of host ‘<a href="http://e.coding.net" target="_blank" rel="noopener">e.coding.net</a> (118.126.70.252)’ can’t be established.<br>RSA key fingerprint is SHA256:jok3FH7q5LJ6qvE7iPNehBgXRw51ErE77S0Dn+Vg/Ik.<br>RSA key fingerprint is MD5:98🆎2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘<a href="http://e.coding.net" target="_blank" rel="noopener">e.coding.net</a>,118.126.70.252’ (RSA) to the list of known hosts.<br>Coding 提示: Hello eddieeo, You’ve connected to <a href="http://Coding.net" target="_blank" rel="noopener">Coding.net</a> via SSH. This is a personal key.<br>eddieeo，你好，你已经通过 SSH 协议认证 <a href="http://Coding.net" target="_blank" rel="noopener">Coding.net</a> 服务，这是一个个人公钥</p></blockquote><h3 id="部署到github-pages"><a class="markdownIt-Anchor" href="#部署到github-pages"></a> 部署到Github Pages</h3><h4 id="创建代码仓库"><a class="markdownIt-Anchor" href="#创建代码仓库"></a> 创建代码仓库</h4><p>使用上面注册的用户登录Github官网，然后点击首页的 Start a project 按钮，创建一个公开的代码仓库，如下图所示，其中Repository name 一定要填写成 <a href="http://username.github.io" target="_blank" rel="noopener">username.github.io</a>，username就是你Github的登录用户名。</p><img src="/2015/09/01/9af43afc/1570630048862.png"><h4 id="修改hexo站点配置文件_configyml"><a class="markdownIt-Anchor" href="#修改hexo站点配置文件_configyml"></a> 修改Hexo站点配置文件_config.yml</h4><p>修改博客站点的配置文件_config.yml，将deploy的配置修改为如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Eddieeo/eddieeo.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="生成静态页面"><a class="markdownIt-Anchor" href="#生成静态页面"></a> 生成静态页面</h4><p><code>cd</code> 到你的Hexo站点的初始化目录blog下，清除上次生成静态页面留下的缓存，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo clean # 清除缓存 网页正常情况下可以忽略此条命令</span><br></pre></td></tr></table></figure><p>然后执行如下命令，生成静态页面至当前路径下的 <code>public</code> 目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo generate   # 生成静态页，简写命令 hexo g</span><br></pre></td></tr></table></figure><blockquote><p>命令必须在 站点目录下执行，否则不成功，但是也不报错。<br>当你修改文章 <code>Tag</code> 或其他内容时，不能正确重新生成内容，可以删除 <code>hexo\db.json</code> 后重试，还不行就到 <code>public</code> 目录删除对应的文件，重新生成。</p></blockquote><h4 id="发布到github-pages"><a class="markdownIt-Anchor" href="#发布到github-pages"></a> 发布到Github Pages</h4><p>前提：要想通过git部署，必须确保Hexo站点目录下有安装 hexo-deployer-git 插件，可以在Hexo站点目录下执行以下命令安装该插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后<code>cd</code> 到你的Hexo站点的初始化目录blog下，执行如下命令进行发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo deploy    # 简写命令 hexo d</span><br></pre></td></tr></table></figure><p>看到类似如下图所示的返回，即表示发布成功。</p><img src="/2015/09/01/9af43afc/1570698171684.png"><h3 id="部署到coding-pages"><a class="markdownIt-Anchor" href="#部署到coding-pages"></a> 部署到Coding Pages</h3><h4 id="创建代码仓库-2"><a class="markdownIt-Anchor" href="#创建代码仓库-2"></a> 创建代码仓库</h4><p>使用上面注册的用户登录Coding官网，然后点击首页的全部项目按钮，创建一个私有的项目，如下图所示，其中项目名称任意填写。</p><img src="/2015/09/01/9af43afc/1570699391729.png"> <img src="/2015/09/01/9af43afc/1570699282940.png"> <img src="/2015/09/01/9af43afc/1570699344161.png"><h4 id="修改hexo站点配置文件_configyml-2"><a class="markdownIt-Anchor" href="#修改hexo站点配置文件_configyml-2"></a> 修改Hexo站点配置文件_config.yml</h4><p>修改博客站点的配置文件_config.yml，将deploy的配置修改为如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:  git@e.coding.net:itunion/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="生成静态页面-2"><a class="markdownIt-Anchor" href="#生成静态页面-2"></a> 生成静态页面</h4><p><code>cd</code> 到你的Hexo站点的初始化目录blog下，清除上次生成静态页面留下的缓存，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo clean # 清除缓存 网页正常情况下可以忽略此条命令</span><br></pre></td></tr></table></figure><p>然后执行如下命令，生成静态页面至当前路径下的 <code>public</code> 目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo generate   # 生成静态页，简写命令 hexo g</span><br></pre></td></tr></table></figure><blockquote><p>命令必须在 站点目录下执行，否则不成功，但是也不报错。<br>当你修改文章 <code>Tag</code> 或其他内容时，不能正确重新生成内容，可以删除 <code>hexo\db.json</code> 后重试，还不行就到 <code>public</code> 目录删除对应的文件，重新生成。</p></blockquote><h4 id="发布到coding-pages"><a class="markdownIt-Anchor" href="#发布到coding-pages"></a> 发布到Coding Pages</h4><p>前提：要想通过git部署，必须确保Hexo站点目录下有安装 hexo-deployer-git 插件，可以在Hexo站点目录下执行以下命令安装该插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后<code>cd</code> 到你的Hexo站点的初始化目录blog下，执行如下命令进行发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo deploy    # 简写命令 hexo d</span><br></pre></td></tr></table></figure><p>看到类似如下图所示的返回，即表示发布成功。</p><img src="/2015/09/01/9af43afc/1570696524516.png"><h4 id="开启静态网站"><a class="markdownIt-Anchor" href="#开启静态网站"></a> 开启静态网站</h4><p>登录Coding网站，进入到blog项目，设置开启静态网站。</p><img src="/2015/09/01/9af43afc/1570703859829.png"> <img src="/2015/09/01/9af43afc/1570703886131.png"><h3 id="同时部署到github-pages和coding-pages"><a class="markdownIt-Anchor" href="#同时部署到github-pages和coding-pages"></a> 同时部署到Github Pages和Coding Pages</h3><h4 id="创建代码仓库-3"><a class="markdownIt-Anchor" href="#创建代码仓库-3"></a> 创建代码仓库</h4><p>分别在Github Pages和Coding Pages新建好仓库和项目，此步骤可以参考前面的内容。</p><h4 id="修改hexo站点配置文件_configyml-3"><a class="markdownIt-Anchor" href="#修改hexo站点配置文件_configyml-3"></a> 修改Hexo站点配置文件_config.yml</h4><p>修改博客站点的配置文件_config.yml，将deploy的配置修改为如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@e.coding.net:itunion/blog.git,master</span><br><span class="line">    coding: git@github.com:Eric-Cai/Eric-Cai.github.io.git,master</span><br></pre></td></tr></table></figure><h4 id="生成静态页面-3"><a class="markdownIt-Anchor" href="#生成静态页面-3"></a> 生成静态页面</h4><p><code>cd</code> 到你的Hexo站点的初始化目录blog下，清除上次生成静态页面留下的缓存，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo clean # 清除缓存 网页正常情况下可以忽略此条命令</span><br></pre></td></tr></table></figure><p>然后执行如下命令，生成静态页面至当前路径下的 <code>public</code> 目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo generate   # 生成静态页，简写命令 hexo g</span><br></pre></td></tr></table></figure><blockquote><p>命令必须在 站点目录下执行，否则不成功，但是也不报错。<br>当你修改文章 <code>Tag</code> 或其他内容时，不能正确重新生成内容，可以删除 <code>hexo\db.json</code> 后重试，还不行就到 <code>public</code> 目录删除对应的文件，重新生成。</p></blockquote><h4 id="同时发布到github-pages和coding-pages"><a class="markdownIt-Anchor" href="#同时发布到github-pages和coding-pages"></a> 同时发布到Github Pages和Coding Pages</h4><p>前提：要想通过git部署，必须确保Hexo站点目录下有安装 hexo-deployer-git 插件，可以在Hexo站点目录下执行以下命令安装该插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后<code>cd</code> 到你的Hexo站点的初始化目录blog下，执行如下命令进行发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo deploy    # 简写命令 hexo d</span><br></pre></td></tr></table></figure><p>看到类似如下图所示的返回，即表示发布成功。</p><img src="/2015/09/01/9af43afc/1570701873005.png"><h2 id="hexo-命令"><a class="markdownIt-Anchor" href="#hexo-命令"></a> Hexo 命令</h2><h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo clean # 清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure><h3 id="常用复合命令"><a class="markdownIt-Anchor" href="#常用复合命令"></a> 常用复合命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><h3 id="简写"><a class="markdownIt-Anchor" href="#简写"></a> 简写：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>至此，基本操作介绍完毕，以下内容普通用户无需了解。</p><h2 id="目录介绍"><a class="markdownIt-Anchor" href="#目录介绍"></a> 目录介绍</h2><h3 id="默认目录结构"><a class="markdownIt-Anchor" href="#默认目录结构"></a> 默认目录结构：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><ul><li>.deploy：执行 hexo deploy 命令部署到 GitHub 上的内容目录</li><li>public：执行 hexo generate 命令，输出的静态网页内容目录</li><li>scaffolds：layout 模板文件目录，其中的 md 文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些 javascript 脚本</li><li>source：文章源码目录，该目录下的 markdown 和 html 文件均会被 hexo 处理。该页面对应 repo 的根目录，404 文件、favicon.ico 文件，CNAME 文件等都应该放这里，该目录下可新建页面目录。<ul><li>_drafts：草稿文章</li><li>_posts：发布文章</li></ul></li><li>themes：主题文件目录</li><li>_config.yml：全局配置文件，大多数的设置都在这里</li><li>package.json：应用程序数据，指明 hexo 的版本等信息，类似于一般软件中的关于按钮</li></ul><p>接下来是重头戏<code>_config.yml</code>，做个简单说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: http://zespia.tw/hexo/docs/configure.html</span><br><span class="line">## Source: https://github.com/tommy351/hexo/</span><br><span class="line"></span><br><span class="line"># Site #整站的基本信息</span><br><span class="line">title: 不如 #网站标题</span><br><span class="line">subtitle: 码农，程序猿，未来的昏析师 #网站副标题</span><br><span class="line">description: bruce sha&apos;s blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到</span><br><span class="line">author: bruce #网站作者，在下方显示</span><br><span class="line">email: bu.ru@qq.com #联系邮箱</span><br><span class="line">language: zh-CN #语言</span><br><span class="line"></span><br><span class="line"># URL #域名和文件结构</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://ibruce.info #你的域名</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line"></span><br><span class="line"># Writing #写文章选项</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post #默认layout方式</span><br><span class="line">auto_spacing: false # Add spaces between asian characters and western characters</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">max_open_file: 100</span><br><span class="line">multi_thread: true</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">highlight: #代码高亮</span><br><span class="line">  enable: true #是否启用</span><br><span class="line">  line_number: false #是否显示行号</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag #分类与标签</span><br><span class="line">default_category: uncategorized # default</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</span><br><span class="line">## 2: Enable pagination</span><br><span class="line">## 1: Disable pagination</span><br><span class="line">## 0: Fully Disable</span><br><span class="line">archive: 1</span><br><span class="line">category: 1</span><br><span class="line">tag: 1</span><br><span class="line"></span><br><span class="line"># Server #本地服务参数</span><br><span class="line">## Hexo uses Connect as a server</span><br><span class="line">## You can customize the logger format as defined in</span><br><span class="line">## http://www.senchalabs.org/connect/logger.html</span><br><span class="line">port: 4000</span><br><span class="line">logger: true</span><br><span class="line">logger_format:</span><br><span class="line"></span><br><span class="line"># Date / Time format #日期显示格式</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: MMM D YYYY</span><br><span class="line">time_format: H:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination #分页设置</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10 #每页10篇文章</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Disqus #社会化评论disqus，我使用多说，在主题中配置</span><br><span class="line">disqus_shortname:</span><br><span class="line"></span><br><span class="line"># Extensions #插件，暂时未安装插件</span><br><span class="line">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span><br><span class="line">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span><br><span class="line">## 主题</span><br><span class="line">theme: modernist # raytaylorism # pacman # modernist # light</span><br><span class="line">exclude_generator:</span><br><span class="line"></span><br><span class="line"># Deployment #部署</span><br><span class="line">## Docs: http://zespia.tw/hexo/docs/deploy.html</span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  #repository: git@e.coding.net:opsunion/blogsite.git</span><br><span class="line">  repository: git@github.com:Eddieeo/eddieeo.github.io.git  #你的GitHub Pages仓库</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="修改局部页面"><a class="markdownIt-Anchor" href="#修改局部页面"></a> 修改局部页面</h2><p>页面展现的全部逻辑都在每个主题中控制，源代码在 <code>站点目录/themes/你使用的主题/</code> 中，以 <code>hexo-theme-pure</code> 主题为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── languages          #多语言</span><br><span class="line">|   ├── default.yml    #默认语言</span><br><span class="line">|   └── zh-CN.yml      #中文语言</span><br><span class="line">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><br><span class="line">|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制</span><br><span class="line">|   └── _widget        #小挂件的布局，页面下方小挂件的控制</span><br><span class="line">├── source             #源码</span><br><span class="line">|   ├── css            #css源码 </span><br><span class="line">|   |   ├── _base      #*.styl基础css</span><br><span class="line">|   |   ├── _partial   #*.styl局部css</span><br><span class="line">|   |   ├── fonts      #字体</span><br><span class="line">|   |   ├── images     #图片</span><br><span class="line">|   |   └── style.styl #*.styl引入需要的css源码</span><br><span class="line">|   ├── fancybox       #fancybox效果源码</span><br><span class="line">|   └── js             #javascript源代码</span><br><span class="line">├── _config.yml        #主题配置文件</span><br><span class="line">└── README.md          #用GitHub的都知道</span><br></pre></td></tr></table></figure><h2 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h2><h3 id="更新-hexo"><a class="markdownIt-Anchor" href="#更新-hexo"></a> 更新 hexo：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npm update -g hexo</span><br></pre></td></tr></table></figure><h3 id="更新主题-2"><a class="markdownIt-Anchor" href="#更新主题-2"></a> 更新主题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd 站点目录/themes/你的主题</span><br><span class="line"># git pull</span><br></pre></td></tr></table></figure><h3 id="更新插件"><a class="markdownIt-Anchor" href="#更新插件"></a> 更新插件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd 站点目录/</span><br><span class="line"># npm update</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;什么是-hexo&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是-hexo&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://linuxops.fun/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Windows微信多开教程</title>
    <link href="https://linuxops.fun/2015/08/31/c4e0fb25.html"/>
    <id>https://linuxops.fun/2015/08/31/c4e0fb25.html</id>
    <published>2015-08-31T13:40:12.000Z</published>
    <updated>2019-10-30T16:46:16.335Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><h2 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h2><p>Windows上实现打开多个微信的前提条件是，当前后台没有微信程序在运行。</p><h2 id="方法一通过键盘加鼠标同时打开两个微信"><a class="markdownIt-Anchor" href="#方法一通过键盘加鼠标同时打开两个微信"></a> 方法一：通过键盘加鼠标同时打开两个微信</h2><p>先按住键盘的 <code>Enter</code> 键，然后移动鼠标左键点击一下桌面的微信图标，再松开 <code>Enter</code> 键。你会在桌面看到弹出微信程序的登录方框，用鼠标拖动微信程序的登录方框，即可以看到多个微信了，这样就实现微信多开了。</p><h2 id="方法二使用windows批处理实现"><a class="markdownIt-Anchor" href="#方法二使用windows批处理实现"></a> 方法二：使用Windows批处理实现</h2><p>右键单击桌面的微信快捷图标，选择打开文件所在的位置，找到微信程序的安装路径并复制，在桌面新建一个txt文件，命名为多微信启动，粘贴以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TASKKILL /F /IM wechat.exe</span><br><span class="line">start &quot;&quot; &quot;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span><br><span class="line">start &quot;&quot; &quot;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span><br></pre></td></tr></table></figure><p>最后，修改txt文件的后缀名为bat格式，保存退出，双击该bat文件，你会在桌面看到弹出微信程序的登录方框，用鼠标拖动微信程序的登录方框，即可以看到多个微信了，这样就实现微信多开了。想要打开多少个微信程序，只要将这行代码复制多行就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start &quot;&quot; &quot;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：代码中微信程序的绝对路径需要用双引号引起来，而且前两个双引号和第三个双引号中间有一个空格</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;前提&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前提&quot;&gt;&lt;/a&gt; 前提&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="Windows" scheme="https://linuxops.fun/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://linuxops.fun/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows10基本操作习惯</title>
    <link href="https://linuxops.fun/2015/08/29/11a80162.html"/>
    <id>https://linuxops.fun/2015/08/29/11a80162.html</id>
    <published>2015-08-29T13:10:10.000Z</published>
    <updated>2019-10-30T16:46:16.335Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><p>本文主要介绍Windows10系统的一些基本操作习惯。</p><p>Windows10 系统的输入法切换默认是Win键 + 空格键，我们已经习惯了Windows7系统以前的Ctrl + Shift的切换模式，下面教大家如何在Windows10下进行修改成Windows7下默认的Ctrl + Shift切换模式。</p><p>打开 设置—&gt; 时间和语言 —&gt; 语言—&gt; 拼写、键入和键盘设置—&gt; 输入 —&gt; 高级键盘设置 —&gt; 语言栏选项</p><img src="/2015/08/29/11a80162/1569488600885.png"><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;本文主要介绍Windows10系统的一些基本操作习惯。&lt;/p&gt;&lt;p&gt;Windows10 系统的输入法切换默认是Win键 + 
      
    
    </summary>
    
    
      <category term="Windows" scheme="https://linuxops.fun/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://linuxops.fun/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows专业版永久密钥</title>
    <link href="https://linuxops.fun/2015/08/29/6a0826e7.html"/>
    <id>https://linuxops.fun/2015/08/29/6a0826e7.html</id>
    <published>2015-08-29T11:13:12.000Z</published>
    <updated>2019-10-30T16:46:16.335Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><p>​ 很多人都在找 Win10 专业版永久密钥，其实 Win10 激活码不管版本新旧都是通用的，也就是说一个 Win10 专业版 key，可以同时激活 Windows10 专业版 1809、1803、1709、1703、1607、1511 等全部新旧版本。</p><p>​ 下面给大家分享 Win10 专业版永久密钥（支持重装），以及激活方法。数字权利激活是永久性的激活，在同一台电脑上主要硬件（应该是 CPU 和主板）不变化的情况下，重新安装系统时无需再次输入密钥，安装后会系统自动激活。Win10 专业版永久密钥（支持重装）:</p><h2 id="win10-专业版产品密钥"><a class="markdownIt-Anchor" href="#win10-专业版产品密钥"></a> Win10 专业版产品密钥</h2><blockquote><p>NXRQM-CXV6P-PBGVJ-293T4-R3KTY<br>DR9VN-GF3CR-RCWT2-H7TR8-82QGT</p></blockquote><p><strong>步骤：开始–设置–更新和安全–激活–更改产品密钥。</strong></p><h2 id="win10-1083-专业版-kms-客户端安装密钥"><a class="markdownIt-Anchor" href="#win10-1083-专业版-kms-客户端安装密钥"></a> Win10 1083 专业版 KMS 客户端安装密钥</h2><blockquote><p>Windows 10 Professional (专业版)：W269N-WFGWX-YVC9B-4J6C9-T83GX<br>Windows 10 Professional N (专业版 N)：MH37W-N47XK-V7XM9-C7227-GCQG9</p></blockquote><h2 id="win10-kms-客户端安装密钥-永久有效"><a class="markdownIt-Anchor" href="#win10-kms-客户端安装密钥-永久有效"></a> Win10 KMS 客户端安装密钥 永久有效</h2><h3 id="operating-system-edition-操作系统版本kms-client-setup-key-kms-客户端安装序列号"><a class="markdownIt-Anchor" href="#operating-system-edition-操作系统版本kms-client-setup-key-kms-客户端安装序列号"></a> Operating system edition (操作系统版本)：KMS Client Setup Key (KMS 客户端安装序列号)</h3><blockquote><p>Windows 10 Professional (专业版)：W269N-WFGWX-YVC9B-4J6C9-T83GX<br>Windows 10 Professional N (专业版 N)：MH37W-N47XK-V7XM9-C7227-GCQG9<br>Windows 10 Enterprise (企业版)：NPPR9-FWDCX-D2C8J-H872K-2YT43<br>Windows 10 Enterprise N (企业版 N)：DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4<br>Windows 10 Education (教育版)：NW6C2-QMPVW-D7KKK-3GKT6-VCFB2<br>Windows 10 Education N (教育版 N)：2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</p></blockquote><h3 id="windows10-企业版长期服务分支"><a class="markdownIt-Anchor" href="#windows10-企业版长期服务分支"></a> Windows10 企业版长期服务分支：</h3><blockquote><p>Windows 10 Enterprise 2015 LTSB：WNMTR-4C88C-JK8YV-HQ7T2-76DF9<br>Windows 10 Enterprise 2015 LTSB N：2F77B-TNFGY-69QQF-B8YKP-D69TJ<br>Windows 10 Enterprise 2016 LTSB：DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ<br>Windows 10 Enterprise 2016 LTSB N：QFFDN-GRT3P-VKWWX-X7T3R-8B639</p></blockquote><h2 id="windows10-homewin10-家庭版激活码"><a class="markdownIt-Anchor" href="#windows10-homewin10-家庭版激活码"></a> Windows10 Home（Win10 家庭版激活码）</h2><blockquote><p>TX9XD-98N7V-6WMQ6-BX7FG-H8Q99<br>3KHY7-WNT83-DGQKR-F7HPR-844BM<br>7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH<br>PVMJN-6DFY6-9CCP6-7BKTT-D3WVR<br>PPBK3-M92CH-MRR9X-34Y9P-7CH2F</p></blockquote><h3 id="oa-30-版"><a class="markdownIt-Anchor" href="#oa-30-版"></a> (OA 3.0 版)</h3><blockquote><p>Win10 家庭版 37GNV-YCQVD-38XP9-T848R-FC2HD<br>Win10 家庭版 N 33C4Y-NPKCC-V98JP-42G8W-VH636</p></blockquote><h3 id="非-oa-30-版"><a class="markdownIt-Anchor" href="#非-oa-30-版"></a> (非 OA 3.0 版)</h3><blockquote><p>Win10 家庭版 46J3N-RY6B3-BJFDY-VBFT9-V22HG<br>Win10 家庭版 N PGGM7-N77TC-KVR98-D82KJ-DGPHV</p></blockquote><h2 id="win10-企业政府版-400-年期限密钥-相当于永久激活密匙"><a class="markdownIt-Anchor" href="#win10-企业政府版-400-年期限密钥-相当于永久激活密匙"></a> Win10 企业政府版 400 年期限密钥 (相当于永久激活密匙)</h2><blockquote><p>【EnterpriseG】FV469-WGNG4-YQP66-2B2HY-KD8YX<br>【EnterpriseGN】FW7NV-4T673-HF4VX-9X4MM-B4H4T<br>【gvlkEnterpriseG】YYVX9-NTFWV-6MDM3-9PT4T-4M68B<br>【gvlkEnterpriseGN】44RPN-FTY23-9VTTB-MP9BX-T84FV</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;​ 很多人都在找 Win10 专业版永久密钥，其实 Win10 激活码不管版本新旧都是通用的，也就是说一个 Win10 专业
      
    
    </summary>
    
    
      <category term="Windows" scheme="https://linuxops.fun/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://linuxops.fun/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Markdown文章模板</title>
    <link href="https://linuxops.fun/2015/08/29/817bfc99.html"/>
    <id>https://linuxops.fun/2015/08/29/817bfc99.html</id>
    <published>2015-08-29T10:16:12.000Z</published>
    <updated>2019-10-30T16:46:16.334Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --><p>这是一个Markdown的文章模板，写Markdown文档时必须在文档的开头添加以下信息。</p><p>特别注意：此段开头必须是用 YAML Front Matter 的格式输入，注意YAML的语法格式。</p><p>title: # 文章标题<br>date: # 文章创建日期和时间<br>categories: # 文章分类<br>tags: # 文章标签<br>toc: # 是否启用文章内容索引 option: true<br>sidebar: # 是否启用sidebar侧边栏，默认开启侧边栏 option： none 不启用<br>mathjax: # 是否启用数学公式渲染 option: true</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 31 2019 00:46:53 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;这是一个Markdown的文章模板，写Markdown文档时必须在文档的开头添加以下信息。&lt;/p&gt;&lt;p&gt;特别注意：此段开头必
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://linuxops.fun/categories/Tools/"/>
    
    
  </entry>
  
</feed>
